How is working the SDK continuous integration
---------------------------------------------

Although the SDK is regularly released, there is a continous integration flow set-up in order to identify as soon as possible the possible reasons of broken features.

The entry point for seeing the results of this flow is here: https://iis-jenkins.ee.ethz.ch:8443/view/sdk

SDK versionning
...............

The SDK is a set of modules with specific versions. The versions are specified in the top SDK module called pulp_pipeline. In order for an SDK to use more recent modules versions, this top-level module must be modified, which allows controlling what is exactly used by a specific SDK.

There are 2 important branches for this top-level module:

- **master**: this contains only stable versions of this SDK and no development should be committed directly to this branch.

- **integration**: this contains SDK versions which are good candidates for being integrated in the master branch. They are committed there in order to first validate them before merge to the master.

Per-commit builds
.................

Every commit to the integration branch will trigger an SDK build and a deployment of the package to the artifactory server.

It will also trigger a quick non-regression testsuite (mainly on virtual platform, and a few quick tests on other platforms) so that a feedback is quickly available (after less than 1 hour).

These per-commit builds are not enough to say that the version can be integrated into the master branch, they should not be used to go-on with the developments.

These builds are using the gitlab CI feature to trigger builds on Jenkins. A file called .gitlab-ci.yml stored in pulp_pipeline root folder describes what must be launched and is interpreted by gitlab each time there is a commit.

Due to gitlab limitations, any commit in any branch of pulp-pipeline will actually trigger a build.

Nightly builds
..............

In order to also check the impact of modifications in any of the SDK modules as soon as it is committed, there is also one build per night which is done of the latest modules versions.

For that a new version of pulp_pipeline is committed once per night in the integration branch, pointing to the latest modules versions.

This is done with a periodic Jenkins job that is using the plpadmin tool to checkout the latest modules and commit a new pulp_pipeline version. The Jenkins job can be accessed here: https://iis-jenkins.ee.ethz.ch:8443/view/sdk/job/sdk_nightly_build

Then the flow described above (per-commit build) is used with the difference that a full non-regression test suite is run, so that this version is ready to be merged in the master branch if it is stable enough.

Specific builds
...............

When a specific version needs to be built and validated, the plpadmin tool can be used by hands to push a new pulp_pipeline version and trigger the automatic build.