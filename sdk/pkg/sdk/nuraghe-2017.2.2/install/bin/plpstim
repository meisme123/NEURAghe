#!/usr/bin/env python3

import argparse
import traceback
import os.path
import plpstim

from matmul import *
from matmul_ew import *
from matadd import *
from conv2d import *
from matmul_ew import *
from threshold import *
from fir_filter import *

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

parser = argparse.ArgumentParser(description='Generate stimuli')

parser.add_argument("--path", dest="path", default="stimulis.h", help="Specifies stimuli file path")
parser.add_argument("--stimuli", dest="stimulis", action="append", default=[], help="Specifies stimuli")
parser.add_argument("--dump", dest="dump", action="store_true", default=False, help="Dump stimuli information")

[args, otherArgs] = parser.parse_known_args()




kernels = [
  plp_conv5x5_i8_norm, plp_conv5x5_u8_norm, plp_conv5x5_i16_norm, plp_conv5x5_u16_norm,
  plp_conv5x5_i16_hw, plp_conv5x5_u16_hw, plp_conv5x5_i16_hw_strided, plp_conv5x5_u16_hw_strided, plp_conv5x5_i16_hw_feat, plp_conv5x5_i16_hw_feat_vect2, plp_conv5x5_i16_hw_feat_vect4,
  plp_matmul_u8, plp_matmul_i8, plp_matmul_u16, plp_matmul_i16, plp_matmul_u32, plp_matmul_i32,
  plp_matmul_u8x16, plp_matmul_i8x16, plp_matmul_u16x32, plp_matmul_i16x32, plp_matmul_u32x64, plp_matmul_i32x64,
  plp_matmul_u8_norm, plp_matmul_i8_norm, plp_matmul_u16_norm, plp_matmul_i16_norm, plp_matmul_u32_norm, plp_matmul_i32_norm,
  plp_matadd_u8, plp_matadd_i8, plp_matadd_u16, plp_matadd_i16, plp_matadd_u32, plp_matadd_i32,
  plp_threshold_u8, plp_threshold_i8, plp_threshold_u16, plp_threshold_i16, plp_threshold_u32, plp_threshold_i32,
  plp_matmul_ew_u8, plp_matmul_ew_i8, plp_matmul_ew_u16, plp_matmul_ew_i16, plp_matmul_ew_u8x16, plp_matmul_ew_i8x16, plp_matmul_ew_u16x32, plp_matmul_ew_i16x32, plp_matmul_ew_u32, plp_matmul_ew_i32,
  plp_fir_filter_q31, plp_fir_filter_f32, plp_fir_filter_f64,
]

try:

  stimuli = StimuliFile(args.path, args.stimulis, kernels)
  stimuli.parse(args)
  stimuli.gen()

except Exception as e:
  print (traceback.format_exc())
  print (e)