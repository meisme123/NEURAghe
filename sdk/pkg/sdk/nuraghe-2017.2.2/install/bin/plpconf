#!/usr/bin/env python3

import argparse
import pulpconfig
import os
import sys

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

parser = argparse.ArgumentParser(description='Help generating configurations')

parser.add_argument("--config", dest="configs", default=[], action="append", help="Append configuration")
parser.add_argument("--version", dest="versions", default=[], action="append", help="Specify a package version")
parser.add_argument("--setup", dest="setup", default=None, help="Generated setup file name")

for key in pulpconfig.getConfigItems():
	parser.add_argument("--" + key, dest=key, default=None, help="Sets " + key)

args = parser.parse_args()

configDict = {}
for key in pulpconfig.getConfigItems():
    if args.__dict__.get(key) != None: configDict[key] = args.__dict__.get(key)

configs = []
configsStringList = []

if len(configDict) !=0 or len(args.configs) == 0:

    if len(configDict) == 0: print ('No configuration specified, chosing default configuration\n')

    configs += pulpconfig.getConfigurationSet(configDict)

if len(args.configs) != 0:
    configsStringList += args.configs
    for config in args.configs:
        configs += pulpconfig.createConfigsFromRegexp(config)

print ('Selected configurations:')
configsList = []
for config in configs:
    print ('  ' + config.getString())
    configsList.append(config.getString())

configsString = ' '.join(configsList)

versionList = []
if len(args.versions) != 0:
    print ('')
    print ('Selected versions:')
    for version in args.versions:
        try:
            name, value = version.split('=')
        except:
            print (bcolors.FAIL + 'Error while parsing version string (should be <name>=<value>): %s' % (version) + bcolors.ENDC)
            raise
        print ('  %s: %s' % (name, value))
        versionList.append('%s=%s' % (name, value))

    versionString = ':'.join(versionList)
else:
    versionString = ''

setup = args.setup
if setup == None:
    setup = 'setup'
    setup = os.path.join(os.getcwd(), setup)

print ()
print ('Generating configuration script:')
print ('  sh:   %s.sh' % (setup))
print ('  csh:  %s.csh' % (setup))

with open('%s.csh' % setup, 'w') as setupFile:
    setupFile.write('alias prepend_path \'set arg2="\!:2";  if ($?\!:1 == 0) setenv \!:1 "$arg2";  if ($?\!:1 && $\!:1 !~ {,*:}"$arg2"{:*,}) setenv \!:1 "$arg2":"$\!:1";\'\n')
    setupFile.write('setenv PULP_CONFIGS "%s"\n' % (configsString))
    setupFile.write('setenv PULP_VERSIONS "%s"\n' % (versionString))
    setupFile.write('setenv PULP_PIPELINE_HOME %s\n' % (os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), '..'))))
    setupFile.write('prepend_path PATH $PULP_PIPELINE_HOME/bin\n')
    # We generate a few important root modules in order to get SDK sourceme installed and properfly sourced
    # Otherwise a few paths are not configured
    setupFile.write('if [ -n `which plpbuild` ]; then\n')
    setupFile.write('  plpbuild --m sdk_utils --m pulp_rules build\n')
    setupFile.write('  set envFile="`plpbuild --csh env`"\n')
    setupFile.write('  source $envFile\n')
    setupFile.write('fi\n')
    setupFile.write('echo\n')
    setupFile.write('echo "Configured for following configurations:"\n')
    setupFile.write('foreach config ($PULP_CONFIGS)\n')
    setupFile.write('echo "  $config"\n')
    setupFile.write('end\n')

with open('%s.sh' % setup, 'w') as setupFile:
    setupFile.write('add_path() { if [ -d "$1" ]; then PATH=${PATH//":$1:"/:}; PATH=${PATH/%":$1"/}; PATH=${PATH/#"$1:"/}; PATH="$1${PATH:+":$PATH"}"; fi; }\n')
    setupFile.write('export PULP_CONFIGS="%s"\n' % (configsString))
    setupFile.write('export PULP_VERSIONS="%s"\n' % (versionString))
    setupFile.write('export PULP_PIPELINE_HOME=%s\n' % (os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), '..'))))
    setupFile.write('add_path $PULP_PIPELINE_HOME/bin\n')
    setupFile.write('plpbuildPath=`which plpbuild`\n')
    setupFile.write('if [ -n "$plpbuildPath" ]; then\n')
    setupFile.write('  plpbuild --m sdk_utils --m pulp_rules build\n')
    setupFile.write('  envFile=`plpbuild env`\n')
    setupFile.write('  source $envFile\n')
    setupFile.write('fi\n')
    setupFile.write('echo\n')
    setupFile.write('echo "Configured for following configurations:"\n')
    setupFile.write('for config in $PULP_CONFIGS; do\n')
    setupFile.write('echo "  $config"\n')
    setupFile.write('done\n')