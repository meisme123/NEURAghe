# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_uart', [dirname(__file__)])
        except ImportError:
            import _uart
            return _uart
        if fp is not None:
            try:
                _mod = imp.load_module('_uart', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _uart = swig_import_helper()
    del swig_import_helper
else:
    import _uart
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class trace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trace, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _uart.new_trace()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["isActive"] = _uart.trace_isActive_set
    __swig_getmethods__["isActive"] = _uart.trace_isActive_get
    if _newclass:
        isActive = _swig_property(_uart.trace_isActive_get, _uart.trace_isActive_set)
    __swig_setmethods__["path"] = _uart.trace_path_set
    __swig_getmethods__["path"] = _uart.trace_path_get
    if _newclass:
        path = _swig_property(_uart.trace_path_get, _uart.trace_path_set)

    def dumpMsg(self, fmt: 'char const *') -> "void":
        return _uart.trace_dumpMsg(self, fmt)

    def dumpUserMsg(self, fmt: 'char const *') -> "void":
        return _uart.trace_dumpUserMsg(self, fmt)

    def dumpWarning(self, fmt: 'char const *') -> "void":
        return _uart.trace_dumpWarning(self, fmt)

    def setComponent(self, comp: 'component') -> "void":
        return _uart.trace_setComponent(self, comp)
    __swig_destroy__ = _uart.delete_trace
    __del__ = lambda self: None
trace_swigregister = _uart.trace_swigregister
trace_swigregister(trace)

class slavePort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, slavePort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, slavePort, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _uart.new_slavePort()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uart.delete_slavePort
    __del__ = lambda self: None

    def getSlavePortResync(self, initiatorEngine: 'gv::clockEngine *', targetEngine: 'gv::clockEngine *') -> "gv::slavePort *":
        return _uart.slavePort_getSlavePortResync(self, initiatorEngine, targetEngine)

    def setName(self, name: 'string') -> "void":
        return _uart.slavePort_setName(self, name)

    def setComp(self, comp: 'component') -> "void":
        return _uart.slavePort_setComp(self, comp)

    def getPortClass(self) -> "unsigned long long":
        return _uart.slavePort_getPortClass(self)
    __swig_setmethods__["comp"] = _uart.slavePort_comp_set
    __swig_getmethods__["comp"] = _uart.slavePort_comp_get
    if _newclass:
        comp = _swig_property(_uart.slavePort_comp_get, _uart.slavePort_comp_set)
    __swig_setmethods__["name"] = _uart.slavePort_name_set
    __swig_getmethods__["name"] = _uart.slavePort_name_get
    if _newclass:
        name = _swig_property(_uart.slavePort_name_get, _uart.slavePort_name_set)

    def getName(self) -> "char *":
        return _uart.slavePort_getName(self)
    __swig_setmethods__["next"] = _uart.slavePort_next_set
    __swig_getmethods__["next"] = _uart.slavePort_next_get
    if _newclass:
        next = _swig_property(_uart.slavePort_next_get, _uart.slavePort_next_set)
    __swig_setmethods__["slaveId"] = _uart.slavePort_slaveId_set
    __swig_getmethods__["slaveId"] = _uart.slavePort_slaveId_get
    if _newclass:
        slaveId = _swig_property(_uart.slavePort_slaveId_get, _uart.slavePort_slaveId_set)
slavePort_swigregister = _uart.slavePort_swigregister
slavePort_swigregister(slavePort)

class inPort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inPort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inPort, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _uart.inPort_data_set
    __swig_getmethods__["data"] = _uart.inPort_data_get
    if _newclass:
        data = _swig_property(_uart.inPort_data_get, _uart.inPort_data_set)
    __swig_setmethods__["comp"] = _uart.inPort_comp_set
    __swig_getmethods__["comp"] = _uart.inPort_comp_get
    if _newclass:
        comp = _swig_property(_uart.inPort_comp_get, _uart.inPort_comp_set)
    __swig_setmethods__["targetComp"] = _uart.inPort_targetComp_set
    __swig_getmethods__["targetComp"] = _uart.inPort_targetComp_get
    if _newclass:
        targetComp = _swig_property(_uart.inPort_targetComp_get, _uart.inPort_targetComp_set)
    __swig_setmethods__["targetEval"] = _uart.inPort_targetEval_set
    __swig_getmethods__["targetEval"] = _uart.inPort_targetEval_get
    if _newclass:
        targetEval = _swig_property(_uart.inPort_targetEval_get, _uart.inPort_targetEval_set)
    __swig_setmethods__["widthWords"] = _uart.inPort_widthWords_set
    __swig_getmethods__["widthWords"] = _uart.inPort_widthWords_get
    if _newclass:
        widthWords = _swig_property(_uart.inPort_widthWords_get, _uart.inPort_widthWords_set)

    def checkTarget(self) -> "void":
        return _uart.inPort_checkTarget(self)

    def read32(self) -> "uint32_t":
        return _uart.inPort_read32(self)

    def readAt(self, wordIndex: 'int') -> "uint32_t":
        return _uart.inPort_readAt(self, wordIndex)

    def copy(self, data: 'uint32_t *') -> "void":
        return _uart.inPort_copy(self, data)

    def __init__(self):
        this = _uart.new_inPort()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uart.delete_inPort
    __del__ = lambda self: None
inPort_swigregister = _uart.inPort_swigregister
inPort_swigregister(inPort)

class outPort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, outPort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, outPort, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _uart.outPort_port_set
    __swig_getmethods__["port"] = _uart.outPort_port_get
    if _newclass:
        port = _swig_property(_uart.outPort_port_get, _uart.outPort_port_set)
    __swig_setmethods__["data"] = _uart.outPort_data_set
    __swig_getmethods__["data"] = _uart.outPort_data_get
    if _newclass:
        data = _swig_property(_uart.outPort_data_get, _uart.outPort_data_set)
    __swig_setmethods__["ioId"] = _uart.outPort_ioId_set
    __swig_getmethods__["ioId"] = _uart.outPort_ioId_get
    if _newclass:
        ioId = _swig_property(_uart.outPort_ioId_get, _uart.outPort_ioId_set)
    __swig_setmethods__["comp"] = _uart.outPort_comp_set
    __swig_getmethods__["comp"] = _uart.outPort_comp_get
    if _newclass:
        comp = _swig_property(_uart.outPort_comp_get, _uart.outPort_comp_set)
    __swig_setmethods__["targetIoId"] = _uart.outPort_targetIoId_set
    __swig_getmethods__["targetIoId"] = _uart.outPort_targetIoId_get
    if _newclass:
        targetIoId = _swig_property(_uart.outPort_targetIoId_get, _uart.outPort_targetIoId_set)
    __swig_setmethods__["targetComp"] = _uart.outPort_targetComp_set
    __swig_getmethods__["targetComp"] = _uart.outPort_targetComp_get
    if _newclass:
        targetComp = _swig_property(_uart.outPort_targetComp_get, _uart.outPort_targetComp_set)
    __swig_setmethods__["targetEval"] = _uart.outPort_targetEval_set
    __swig_getmethods__["targetEval"] = _uart.outPort_targetEval_get
    if _newclass:
        targetEval = _swig_property(_uart.outPort_targetEval_get, _uart.outPort_targetEval_set)
    __swig_setmethods__["updated"] = _uart.outPort_updated_set
    __swig_getmethods__["updated"] = _uart.outPort_updated_get
    if _newclass:
        updated = _swig_property(_uart.outPort_updated_get, _uart.outPort_updated_set)

    def checkTarget(self) -> "void":
        return _uart.outPort_checkTarget(self)

    def write32(self, value: 'uint32_t') -> "void":
        return _uart.outPort_write32(self, value)

    def __init__(self):
        this = _uart.new_outPort()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uart.delete_outPort
    __del__ = lambda self: None
outPort_swigregister = _uart.outPort_swigregister
outPort_swigregister(outPort)

class combRegInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, combRegInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, combRegInit, name)
    __repr__ = _swig_repr

    def __init__(self, port: 'outPort', data: 'uint32_t *'):
        this = _uart.new_combRegInit(port, data)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["port"] = _uart.combRegInit_port_set
    __swig_getmethods__["port"] = _uart.combRegInit_port_get
    if _newclass:
        port = _swig_property(_uart.combRegInit_port_get, _uart.combRegInit_port_set)
    __swig_setmethods__["data"] = _uart.combRegInit_data_set
    __swig_getmethods__["data"] = _uart.combRegInit_data_get
    if _newclass:
        data = _swig_property(_uart.combRegInit_data_get, _uart.combRegInit_data_set)
    __swig_destroy__ = _uart.delete_combRegInit
    __del__ = lambda self: None
combRegInit_swigregister = _uart.combRegInit_swigregister
combRegInit_swigregister(combRegInit)

class component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, component, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _uart.new_component()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setEngine(self, engineInstance: 'unsigned long') -> "void":
        return _uart.component_setEngine(self, engineInstance)

    def build(self) -> "int":
        return _uart.component_build(self)

    def start(self) -> "int":
        return _uart.component_start(self)

    def reset(self) -> "void":
        return _uart.component_reset(self)

    def close(self) -> "void":
        return _uart.component_close(self)
    __swig_destroy__ = _uart.delete_component
    __del__ = lambda self: None

    def state(self, name: 'char *') -> "void":
        return _uart.component_state(self, name)

    def memDump(self, base: 'unsigned int', size: 'unsigned int') -> "bool":
        return _uart.component_memDump(self, base, size)

    def getCycles(self) -> "int64_t":
        return _uart.component_getCycles(self)

    def disAllBkp(self) -> "void":
        return _uart.component_disAllBkp(self)

    def setBkp(self, base: 'unsigned int', size: 'unsigned int', access: 'unsigned int') -> "void":
        return _uart.component_setBkp(self, base, size, access)

    def checkBkp(self, base: 'unsigned int', size: 'unsigned int', access: 'unsigned int', matchAddr: 'unsigned int &', matchAccess: 'unsigned int &') -> "bool":
        return _uart.component_checkBkp(self, base, size, access, matchAddr, matchAccess)

    def reg(self, outPort: 'outPort', data: 'uint32_t *', localData: 'uint32_t **', inPort: 'inPort') -> "void":
        return _uart.component_reg(self, outPort, data, localData, inPort)

    def regOut(self, name: 'string', port: 'outPort') -> "void":
        return _uart.component_regOut(self, name, port)

    def regIn(self, *args) -> "void":
        return _uart.component_regIn(self, *args)

    def evalNetwork(self) -> "void":
        return _uart.component_evalNetwork(self)

    def commitNetwork(self) -> "void":
        return _uart.component_commitNetwork(self)

    def setNetwork(self, network: 'component') -> "void":
        return _uart.component_setNetwork(self, network)

    def eval(self) -> "void":
        return _uart.component_eval(self)

    def precommit(self) -> "void":
        return _uart.component_precommit(self)

    def commit(self) -> "void":
        return _uart.component_commit(self)

    def syncNextCycle(self, *args) -> "void":
        return _uart.component_syncNextCycle(self, *args)

    def syncOut(self, *args) -> "void":
        return _uart.component_syncOut(self, *args)

    def addCell(self, comp: 'component') -> "void":
        return _uart.component_addCell(self, comp)

    def connectNetworkOutputs(self) -> "void":
        return _uart.component_connectNetworkOutputs(self)

    def regSlave(self, name: 'string', port: 'slavePort') -> "void":
        return _uart.component_regSlave(self, name, port)

    def registerPowerTrace(self, trace: 'gv::powerTrace **', name: 'char *') -> "bool":
        return _uart.component_registerPowerTrace(self, trace, name)

    def confPowerTrace(self, trace: 'gv::powerTrace *') -> "void":
        return _uart.component_confPowerTrace(self, trace)

    def confVcdTrace(self, trace: 'gv::vcdTrace *', path: 'char const *', isActive: 'bool', file: 'long') -> "void":
        return _uart.component_confVcdTrace(self, trace, path, isActive, file)

    def getSlavePort(self, name: 'char *') -> "gv::slavePort *":
        return _uart.component_getSlavePort(self, name)

    def getSlavePortResync(self, initiatorEngine: 'unsigned long long', port: 'slavePort') -> "gv::slavePort *":
        return _uart.component_getSlavePortResync(self, initiatorEngine, port)

    def regMaster(self, name: 'string', port: 'gv::masterPort *') -> "void":
        return _uart.component_regMaster(self, name, port)

    def getMasterName(self, index: 'unsigned int') -> "char const *":
        return _uart.component_getMasterName(self, index)

    def getSlaveName(self, index: 'unsigned int') -> "char const *":
        return _uart.component_getSlaveName(self, index)

    def getTrace(self, name: 'char const *') -> "gv::trace *":
        return _uart.component_getTrace(self, name)

    def getVcdTrace(self, name: 'char const *') -> "gv::vcdTrace *":
        return _uart.component_getVcdTrace(self, name)

    def getTraceName(self, index: 'unsigned int') -> "char const *":
        return _uart.component_getTraceName(self, index)

    def getVcdTraceName(self, index: 'unsigned int') -> "char const *":
        return _uart.component_getVcdTraceName(self, index)

    def linkMasterTo(self, name: 'char const *', slavePort: 'slavePort') -> "void":
        return _uart.component_linkMasterTo(self, name, slavePort)

    def regTrace(self, name: 'string', tr: 'trace') -> "void":
        return _uart.component_regTrace(self, name, tr)

    def regVcd(self, name: 'string', vcd: 'gv::vcdTrace *', width: 'int') -> "void":
        return _uart.component_regVcd(self, name, vcd, width)

    def regVcdString(self, name: 'string', vcd: 'gv::vcdTrace *') -> "void":
        return _uart.component_regVcdString(self, name, vcd)

    def getUserTrace(self) -> "gv::trace *":
        return _uart.component_getUserTrace(self)

    def getEngine(self) -> "engine *":
        return _uart.component_getEngine(self)

    def getPowerEngine(self) -> "gv::powerEngine *":
        return _uart.component_getPowerEngine(self)

    def confTrace(self, name: 'char const *', path: 'char const *', active: 'bool') -> "void":
        return _uart.component_confTrace(self, name, path, active)

    def reorderCell(self, nextComp: 'component') -> "void":
        return _uart.component_reorderCell(self, nextComp)

    def dequeueCell(self) -> "void":
        return _uart.component_dequeueCell(self)
    __swig_setmethods__["network"] = _uart.component_network_set
    __swig_getmethods__["network"] = _uart.component_network_get
    if _newclass:
        network = _swig_property(_uart.component_network_get, _uart.component_network_set)
    __swig_setmethods__["evaluated"] = _uart.component_evaluated_set
    __swig_getmethods__["evaluated"] = _uart.component_evaluated_get
    if _newclass:
        evaluated = _swig_property(_uart.component_evaluated_get, _uart.component_evaluated_set)
    __swig_setmethods__["path"] = _uart.component_path_set
    __swig_getmethods__["path"] = _uart.component_path_get
    if _newclass:
        path = _swig_property(_uart.component_path_get, _uart.component_path_set)
    __swig_setmethods__["evalCell"] = _uart.component_evalCell_set
    __swig_getmethods__["evalCell"] = _uart.component_evalCell_get
    if _newclass:
        evalCell = _swig_property(_uart.component_evalCell_get, _uart.component_evalCell_set)
component_swigregister = _uart.component_swigregister
component_swigregister(component)

class callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, callback, name)
    __repr__ = _swig_repr

    def __init__(self, handler: 'gv::callback_handle'):
        this = _uart.new_callback(handler)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _exec(self) -> "void":
        return _uart.callback__exec(self)
    __swig_destroy__ = _uart.delete_callback
    __del__ = lambda self: None
callback_swigregister = _uart.callback_swigregister
callback_swigregister(callback)

class callbackFifo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, callbackFifo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, callbackFifo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _uart.new_callbackFifo()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push(self, callback: 'callback') -> "void":
        return _uart.callbackFifo_push(self, callback)

    def pop(self) -> "gv::callback *":
        return _uart.callbackFifo_pop(self)

    def popAndExec(self) -> "void":
        return _uart.callbackFifo_popAndExec(self)
    __swig_destroy__ = _uart.delete_callbackFifo
    __del__ = lambda self: None
callbackFifo_swigregister = _uart.callbackFifo_swigregister
callbackFifo_swigregister(callbackFifo)


_uart.GV_IOREQ_ERROR_swigconstant(_uart)
GV_IOREQ_ERROR = _uart.GV_IOREQ_ERROR

_uart.GV_IOREQ_STALLED_swigconstant(_uart)
GV_IOREQ_STALLED = _uart.GV_IOREQ_STALLED

_uart.GV_IOREQ_NB_STALL_DATA_swigconstant(_uart)
GV_IOREQ_NB_STALL_DATA = _uart.GV_IOREQ_NB_STALL_DATA
class ioReq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ioReq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ioReq, name)
    __repr__ = _swig_repr

    def __init__(self, initiator: 'component', addr: 'uint32_t', data: 'uint8_t *', size: 'uint32_t', isRead: 'bool'):
        this = _uart.new_ioReq(initiator, addr, data, size, isRead)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getAddr(self) -> "uint32_t":
        return _uart.ioReq_getAddr(self)

    def setAddr(self, addr: 'uint32_t') -> "void":
        return _uart.ioReq_setAddr(self, addr)

    def getData(self) -> "uint8_t *":
        return _uart.ioReq_getData(self)

    def setData(self, data: 'uint8_t *') -> "void":
        return _uart.ioReq_setData(self, data)

    def getSize(self) -> "uint32_t":
        return _uart.ioReq_getSize(self)

    def setSize(self, size: 'uint32_t') -> "void":
        return _uart.ioReq_setSize(self, size)

    def getIsRead(self) -> "bool":
        return _uart.ioReq_getIsRead(self)

    def setIsRead(self, isRead: 'bool') -> "void":
        return _uart.ioReq_setIsRead(self, isRead)

    def setLatency(self, newLatency: 'int64_t') -> "void":
        return _uart.ioReq_setLatency(self, newLatency)

    def incLatency(self, incr: 'int64_t') -> "void":
        return _uart.ioReq_incLatency(self, incr)

    def setLength(self, newDuration: 'int64_t') -> "void":
        return _uart.ioReq_setLength(self, newDuration)

    def getStartCycles(self) -> "int64_t":
        return _uart.ioReq_getStartCycles(self)

    def getLatency(self) -> "int64_t":
        return _uart.ioReq_getLatency(self)

    def getLength(self) -> "int64_t":
        return _uart.ioReq_getLength(self)

    def getEndCycles(self) -> "int64_t":
        return _uart.ioReq_getEndCycles(self)

    def switchEngine(self, engine: 'gv::clockEngine *') -> "void":
        return _uart.ioReq_switchEngine(self, engine)

    def getEngine(self) -> "engine *":
        return _uart.ioReq_getEngine(self)

    def setDebug(self, value: 'bool') -> "void":
        return _uart.ioReq_setDebug(self, value)

    def getDebug(self) -> "bool":
        return _uart.ioReq_getDebug(self)

    def setSecure(self, value: 'bool') -> "void":
        return _uart.ioReq_setSecure(self, value)

    def getSecure(self) -> "bool":
        return _uart.ioReq_getSecure(self)
    __swig_setmethods__["error"] = _uart.ioReq_error_set
    __swig_getmethods__["error"] = _uart.ioReq_error_get
    if _newclass:
        error = _swig_property(_uart.ioReq_error_get, _uart.ioReq_error_set)
    __swig_setmethods__["stallCallback"] = _uart.ioReq_stallCallback_set
    __swig_getmethods__["stallCallback"] = _uart.ioReq_stallCallback_get
    if _newclass:
        stallCallback = _swig_property(_uart.ioReq_stallCallback_get, _uart.ioReq_stallCallback_set)
    __swig_setmethods__["stallRetryCallback"] = _uart.ioReq_stallRetryCallback_set
    __swig_getmethods__["stallRetryCallback"] = _uart.ioReq_stallRetryCallback_get
    if _newclass:
        stallRetryCallback = _swig_property(_uart.ioReq_stallRetryCallback_get, _uart.ioReq_stallRetryCallback_set)
    __swig_setmethods__["stallData"] = _uart.ioReq_stallData_set
    __swig_getmethods__["stallData"] = _uart.ioReq_stallData_get
    if _newclass:
        stallData = _swig_property(_uart.ioReq_stallData_get, _uart.ioReq_stallData_set)
    __swig_setmethods__["next"] = _uart.ioReq_next_set
    __swig_getmethods__["next"] = _uart.ioReq_next_get
    if _newclass:
        next = _swig_property(_uart.ioReq_next_get, _uart.ioReq_next_set)
    __swig_destroy__ = _uart.delete_ioReq
    __del__ = lambda self: None
ioReq_swigregister = _uart.ioReq_swigregister
ioReq_swigregister(ioReq)

class ioSlave(slavePort):
    __swig_setmethods__ = {}
    for _s in [slavePort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ioSlave, name, value)
    __swig_getmethods__ = {}
    for _s in [slavePort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ioSlave, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _uart.new_ioSlave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["ioReq"] = _uart.ioSlave_ioReq_set
    __swig_getmethods__["ioReq"] = _uart.ioSlave_ioReq_get
    if _newclass:
        ioReq = _swig_property(_uart.ioSlave_ioReq_get, _uart.ioSlave_ioReq_set)
    __swig_setmethods__["resyncTarget"] = _uart.ioSlave_resyncTarget_set
    __swig_getmethods__["resyncTarget"] = _uart.ioSlave_resyncTarget_get
    if _newclass:
        resyncTarget = _swig_property(_uart.ioSlave_resyncTarget_get, _uart.ioSlave_resyncTarget_set)
    __swig_setmethods__["initiatorEngine"] = _uart.ioSlave_initiatorEngine_set
    __swig_getmethods__["initiatorEngine"] = _uart.ioSlave_initiatorEngine_get
    if _newclass:
        initiatorEngine = _swig_property(_uart.ioSlave_initiatorEngine_get, _uart.ioSlave_initiatorEngine_set)
    __swig_setmethods__["targetEngine"] = _uart.ioSlave_targetEngine_set
    __swig_getmethods__["targetEngine"] = _uart.ioSlave_targetEngine_get
    if _newclass:
        targetEngine = _swig_property(_uart.ioSlave_targetEngine_get, _uart.ioSlave_targetEngine_set)

    def ioReqResync(self, req: 'ioReq') -> "bool":
        return _uart.ioSlave_ioReqResync(self, req)

    def getSlavePortResync(self, initiatorEngine: 'gv::clockEngine *', targetEngine: 'gv::clockEngine *') -> "gv::slavePort *":
        return _uart.ioSlave_getSlavePortResync(self, initiatorEngine, targetEngine)
    __swig_destroy__ = _uart.delete_ioSlave
    __del__ = lambda self: None
ioSlave_swigregister = _uart.ioSlave_swigregister
ioSlave_swigregister(ioSlave)

class combSlave(slavePort):
    __swig_setmethods__ = {}
    for _s in [slavePort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, combSlave, name, value)
    __swig_getmethods__ = {}
    for _s in [slavePort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, combSlave, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _uart.new_combSlave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["regMeth"] = _uart.combSlave_regMeth_set
    __swig_getmethods__["regMeth"] = _uart.combSlave_regMeth_get
    if _newclass:
        regMeth = _swig_property(_uart.combSlave_regMeth_get, _uart.combSlave_regMeth_set)
    __swig_setmethods__["resyncTarget"] = _uart.combSlave_resyncTarget_set
    __swig_getmethods__["resyncTarget"] = _uart.combSlave_resyncTarget_get
    if _newclass:
        resyncTarget = _swig_property(_uart.combSlave_resyncTarget_get, _uart.combSlave_resyncTarget_set)
    __swig_setmethods__["initiatorEngine"] = _uart.combSlave_initiatorEngine_set
    __swig_getmethods__["initiatorEngine"] = _uart.combSlave_initiatorEngine_get
    if _newclass:
        initiatorEngine = _swig_property(_uart.combSlave_initiatorEngine_get, _uart.combSlave_initiatorEngine_set)
    __swig_setmethods__["targetEngine"] = _uart.combSlave_targetEngine_set
    __swig_getmethods__["targetEngine"] = _uart.combSlave_targetEngine_get
    if _newclass:
        targetEngine = _swig_property(_uart.combSlave_targetEngine_get, _uart.combSlave_targetEngine_set)

    def regResync(self, outPort: 'outPort', data: 'uint32_t *') -> "void":
        return _uart.combSlave_regResync(self, outPort, data)

    def reg(self, outPort: 'outPort', data: 'uint32_t *') -> "void":
        return _uart.combSlave_reg(self, outPort, data)

    def getSlavePortResync(self, initiatorEngine: 'gv::clockEngine *', targetEngine: 'gv::clockEngine *') -> "gv::slavePort *":
        return _uart.combSlave_getSlavePortResync(self, initiatorEngine, targetEngine)
    __swig_destroy__ = _uart.delete_combSlave
    __del__ = lambda self: None
combSlave_swigregister = _uart.combSlave_swigregister
combSlave_swigregister(combSlave)

class bsReq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bsReq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bsReq, name)
    __repr__ = _swig_repr

    def __init__(self, initiator: 'component', headerSize: 'int', dataSize: 'int', dataLen: 'int'=0):
        this = _uart.new_bsReq(initiator, headerSize, dataSize, dataLen)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uart.delete_bsReq
    __del__ = lambda self: None

    def getIsRead(self) -> "bool":
        return _uart.bsReq_getIsRead(self)

    def getData(self) -> "uint8_t *":
        return _uart.bsReq_getData(self)

    def getDataHead(self) -> "int":
        return _uart.bsReq_getDataHead(self)

    def setDataHead(self, head: 'int') -> "void":
        return _uart.bsReq_setDataHead(self, head)

    def getHeader(self) -> "uint8_t *":
        return _uart.bsReq_getHeader(self)

    def setNext(self, req: 'bsReq') -> "void":
        return _uart.bsReq_setNext(self, req)

    def getNext(self) -> "gv::bsReq *":
        return _uart.bsReq_getNext(self)

    def getDataSize(self) -> "int":
        return _uart.bsReq_getDataSize(self)

    def getDataLen(self) -> "int":
        return _uart.bsReq_getDataLen(self)

    def setLatency(self, latency: 'int64_t') -> "void":
        return _uart.bsReq_setLatency(self, latency)

    def getLatency(self) -> "int64_t":
        return _uart.bsReq_getLatency(self)

    def setDataSize(self, _dataSize: 'int') -> "void":
        return _uart.bsReq_setDataSize(self, _dataSize)

    def switchEngine(self, engine: 'gv::clockEngine *') -> "void":
        return _uart.bsReq_switchEngine(self, engine)
bsReq_swigregister = _uart.bsReq_swigregister
bsReq_swigregister(bsReq)

class bsSlave(slavePort):
    __swig_setmethods__ = {}
    for _s in [slavePort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, bsSlave, name, value)
    __swig_getmethods__ = {}
    for _s in [slavePort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, bsSlave, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _uart.new_bsSlave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["bsReqMeth"] = _uart.bsSlave_bsReqMeth_set
    __swig_getmethods__["bsReqMeth"] = _uart.bsSlave_bsReqMeth_get
    if _newclass:
        bsReqMeth = _swig_property(_uart.bsSlave_bsReqMeth_get, _uart.bsSlave_bsReqMeth_set)
    __swig_setmethods__["bsDataMeth"] = _uart.bsSlave_bsDataMeth_set
    __swig_getmethods__["bsDataMeth"] = _uart.bsSlave_bsDataMeth_get
    if _newclass:
        bsDataMeth = _swig_property(_uart.bsSlave_bsDataMeth_get, _uart.bsSlave_bsDataMeth_set)
    __swig_setmethods__["resyncTarget"] = _uart.bsSlave_resyncTarget_set
    __swig_getmethods__["resyncTarget"] = _uart.bsSlave_resyncTarget_get
    if _newclass:
        resyncTarget = _swig_property(_uart.bsSlave_resyncTarget_get, _uart.bsSlave_resyncTarget_set)
    __swig_setmethods__["initiatorEngine"] = _uart.bsSlave_initiatorEngine_set
    __swig_getmethods__["initiatorEngine"] = _uart.bsSlave_initiatorEngine_get
    if _newclass:
        initiatorEngine = _swig_property(_uart.bsSlave_initiatorEngine_get, _uart.bsSlave_initiatorEngine_set)
    __swig_setmethods__["targetEngine"] = _uart.bsSlave_targetEngine_set
    __swig_getmethods__["targetEngine"] = _uart.bsSlave_targetEngine_get
    if _newclass:
        targetEngine = _swig_property(_uart.bsSlave_targetEngine_get, _uart.bsSlave_targetEngine_set)

    def bsReqResync(self, req: 'bsReq') -> "bool":
        return _uart.bsSlave_bsReqResync(self, req)

    def bsDataResync(self, data: 'uint8_t *', dataLen: 'unsigned int', latency: 'int64_t *') -> "void":
        return _uart.bsSlave_bsDataResync(self, data, dataLen, latency)

    def bsReq(self, req: 'bsReq') -> "bool":
        return _uart.bsSlave_bsReq(self, req)

    def bsData(self, data: 'uint8_t *', dataLen: 'unsigned int', latency: 'int64_t *') -> "void":
        return _uart.bsSlave_bsData(self, data, dataLen, latency)

    def getSlavePortResync(self, initiatorEngine: 'gv::clockEngine *', targetEngine: 'gv::clockEngine *') -> "gv::slavePort *":
        return _uart.bsSlave_getSlavePortResync(self, initiatorEngine, targetEngine)
    __swig_destroy__ = _uart.delete_bsSlave
    __del__ = lambda self: None
bsSlave_swigregister = _uart.bsSlave_swigregister
bsSlave_swigregister(bsSlave)

class spiHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spiHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spiHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd"] = _uart.spiHeader_cmd_set
    __swig_getmethods__["cmd"] = _uart.spiHeader_cmd_get
    if _newclass:
        cmd = _swig_property(_uart.spiHeader_cmd_get, _uart.spiHeader_cmd_set)
    __swig_setmethods__["addr"] = _uart.spiHeader_addr_set
    __swig_getmethods__["addr"] = _uart.spiHeader_addr_get
    if _newclass:
        addr = _swig_property(_uart.spiHeader_addr_get, _uart.spiHeader_addr_set)
    __swig_setmethods__["len"] = _uart.spiHeader_len_set
    __swig_getmethods__["len"] = _uart.spiHeader_len_get
    if _newclass:
        len = _swig_property(_uart.spiHeader_len_get, _uart.spiHeader_len_set)
    __swig_setmethods__["cs"] = _uart.spiHeader_cs_set
    __swig_getmethods__["cs"] = _uart.spiHeader_cs_get
    if _newclass:
        cs = _swig_property(_uart.spiHeader_cs_get, _uart.spiHeader_cs_set)

    def __init__(self):
        this = _uart.new_spiHeader()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uart.delete_spiHeader
    __del__ = lambda self: None
spiHeader_swigregister = _uart.spiHeader_swigregister
spiHeader_swigregister(spiHeader)

class wireSlave(slavePort):
    __swig_setmethods__ = {}
    for _s in [slavePort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wireSlave, name, value)
    __swig_getmethods__ = {}
    for _s in [slavePort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, wireSlave, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _uart.new_wireSlave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["syncMeth"] = _uart.wireSlave_syncMeth_set
    __swig_getmethods__["syncMeth"] = _uart.wireSlave_syncMeth_get
    if _newclass:
        syncMeth = _swig_property(_uart.wireSlave_syncMeth_get, _uart.wireSlave_syncMeth_set)
    __swig_setmethods__["resyncTarget"] = _uart.wireSlave_resyncTarget_set
    __swig_getmethods__["resyncTarget"] = _uart.wireSlave_resyncTarget_get
    if _newclass:
        resyncTarget = _swig_property(_uart.wireSlave_resyncTarget_get, _uart.wireSlave_resyncTarget_set)
    __swig_setmethods__["initiatorEngine"] = _uart.wireSlave_initiatorEngine_set
    __swig_getmethods__["initiatorEngine"] = _uart.wireSlave_initiatorEngine_get
    if _newclass:
        initiatorEngine = _swig_property(_uart.wireSlave_initiatorEngine_get, _uart.wireSlave_initiatorEngine_set)
    __swig_setmethods__["targetEngine"] = _uart.wireSlave_targetEngine_set
    __swig_getmethods__["targetEngine"] = _uart.wireSlave_targetEngine_get
    if _newclass:
        targetEngine = _swig_property(_uart.wireSlave_targetEngine_get, _uart.wireSlave_targetEngine_set)

    def syncResync(self, value: 'uint32_t') -> "void":
        return _uart.wireSlave_syncResync(self, value)

    def sync(self, value: 'uint32_t') -> "void":
        return _uart.wireSlave_sync(self, value)

    def getSlavePortResync(self, initiatorEngine: 'gv::clockEngine *', targetEngine: 'gv::clockEngine *') -> "gv::slavePort *":
        return _uart.wireSlave_getSlavePortResync(self, initiatorEngine, targetEngine)
    __swig_destroy__ = _uart.delete_wireSlave
    __del__ = lambda self: None
wireSlave_swigregister = _uart.wireSlave_swigregister
wireSlave_swigregister(wireSlave)

class cpuCtrlSlave(slavePort):
    __swig_setmethods__ = {}
    for _s in [slavePort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cpuCtrlSlave, name, value)
    __swig_getmethods__ = {}
    for _s in [slavePort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cpuCtrlSlave, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _uart.new_cpuCtrlSlave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["regAccess"] = _uart.cpuCtrlSlave_regAccess_set
    __swig_getmethods__["regAccess"] = _uart.cpuCtrlSlave_regAccess_get
    if _newclass:
        regAccess = _swig_property(_uart.cpuCtrlSlave_regAccess_get, _uart.cpuCtrlSlave_regAccess_set)
    __swig_setmethods__["resyncTarget"] = _uart.cpuCtrlSlave_resyncTarget_set
    __swig_getmethods__["resyncTarget"] = _uart.cpuCtrlSlave_resyncTarget_get
    if _newclass:
        resyncTarget = _swig_property(_uart.cpuCtrlSlave_resyncTarget_get, _uart.cpuCtrlSlave_resyncTarget_set)
    __swig_setmethods__["initiatorEngine"] = _uart.cpuCtrlSlave_initiatorEngine_set
    __swig_getmethods__["initiatorEngine"] = _uart.cpuCtrlSlave_initiatorEngine_get
    if _newclass:
        initiatorEngine = _swig_property(_uart.cpuCtrlSlave_initiatorEngine_get, _uart.cpuCtrlSlave_initiatorEngine_set)
    __swig_setmethods__["targetEngine"] = _uart.cpuCtrlSlave_targetEngine_set
    __swig_getmethods__["targetEngine"] = _uart.cpuCtrlSlave_targetEngine_get
    if _newclass:
        targetEngine = _swig_property(_uart.cpuCtrlSlave_targetEngine_get, _uart.cpuCtrlSlave_targetEngine_set)

    def regAccessResync(self, reg: 'uint32_t', isRead: 'int', value: 'uint32_t *') -> "bool":
        return _uart.cpuCtrlSlave_regAccessResync(self, reg, isRead, value)

    def getSlavePortResync(self, initiatorEngine: 'gv::clockEngine *', targetEngine: 'gv::clockEngine *') -> "gv::slavePort *":
        return _uart.cpuCtrlSlave_getSlavePortResync(self, initiatorEngine, targetEngine)
    __swig_destroy__ = _uart.delete_cpuCtrlSlave
    __del__ = lambda self: None
cpuCtrlSlave_swigregister = _uart.cpuCtrlSlave_swigregister
cpuCtrlSlave_swigregister(cpuCtrlSlave)

class cacheCtrlSlave(slavePort):
    __swig_setmethods__ = {}
    for _s in [slavePort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cacheCtrlSlave, name, value)
    __swig_getmethods__ = {}
    for _s in [slavePort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cacheCtrlSlave, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _uart.new_cacheCtrlSlave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["enable"] = _uart.cacheCtrlSlave_enable_set
    __swig_getmethods__["enable"] = _uart.cacheCtrlSlave_enable_get
    if _newclass:
        enable = _swig_property(_uart.cacheCtrlSlave_enable_get, _uart.cacheCtrlSlave_enable_set)
    __swig_setmethods__["flushAll"] = _uart.cacheCtrlSlave_flushAll_set
    __swig_getmethods__["flushAll"] = _uart.cacheCtrlSlave_flushAll_get
    if _newclass:
        flushAll = _swig_property(_uart.cacheCtrlSlave_flushAll_get, _uart.cacheCtrlSlave_flushAll_set)
    __swig_setmethods__["flushLine"] = _uart.cacheCtrlSlave_flushLine_set
    __swig_getmethods__["flushLine"] = _uart.cacheCtrlSlave_flushLine_get
    if _newclass:
        flushLine = _swig_property(_uart.cacheCtrlSlave_flushLine_get, _uart.cacheCtrlSlave_flushLine_set)
    __swig_setmethods__["resyncTarget"] = _uart.cacheCtrlSlave_resyncTarget_set
    __swig_getmethods__["resyncTarget"] = _uart.cacheCtrlSlave_resyncTarget_get
    if _newclass:
        resyncTarget = _swig_property(_uart.cacheCtrlSlave_resyncTarget_get, _uart.cacheCtrlSlave_resyncTarget_set)
    __swig_setmethods__["initiatorEngine"] = _uart.cacheCtrlSlave_initiatorEngine_set
    __swig_getmethods__["initiatorEngine"] = _uart.cacheCtrlSlave_initiatorEngine_get
    if _newclass:
        initiatorEngine = _swig_property(_uart.cacheCtrlSlave_initiatorEngine_get, _uart.cacheCtrlSlave_initiatorEngine_set)
    __swig_setmethods__["targetEngine"] = _uart.cacheCtrlSlave_targetEngine_set
    __swig_getmethods__["targetEngine"] = _uart.cacheCtrlSlave_targetEngine_get
    if _newclass:
        targetEngine = _swig_property(_uart.cacheCtrlSlave_targetEngine_get, _uart.cacheCtrlSlave_targetEngine_set)

    def enableResync(self, enable: 'bool') -> "void":
        return _uart.cacheCtrlSlave_enableResync(self, enable)

    def flushAllResync(self) -> "void":
        return _uart.cacheCtrlSlave_flushAllResync(self)

    def flushLineResync(self, addr: 'unsigned int') -> "void":
        return _uart.cacheCtrlSlave_flushLineResync(self, addr)

    def getSlavePortResync(self, initiatorEngine: 'gv::clockEngine *', targetEngine: 'gv::clockEngine *') -> "gv::slavePort *":
        return _uart.cacheCtrlSlave_getSlavePortResync(self, initiatorEngine, targetEngine)
    __swig_destroy__ = _uart.delete_cacheCtrlSlave
    __del__ = lambda self: None
cacheCtrlSlave_swigregister = _uart.cacheCtrlSlave_swigregister
cacheCtrlSlave_swigregister(cacheCtrlSlave)

class regSlave(slavePort):
    __swig_setmethods__ = {}
    for _s in [slavePort]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, regSlave, name, value)
    __swig_getmethods__ = {}
    for _s in [slavePort]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, regSlave, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _uart.new_regSlave(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["regAccessMeth"] = _uart.regSlave_regAccessMeth_set
    __swig_getmethods__["regAccessMeth"] = _uart.regSlave_regAccessMeth_get
    if _newclass:
        regAccessMeth = _swig_property(_uart.regSlave_regAccessMeth_get, _uart.regSlave_regAccessMeth_set)
    __swig_setmethods__["resyncTarget"] = _uart.regSlave_resyncTarget_set
    __swig_getmethods__["resyncTarget"] = _uart.regSlave_resyncTarget_get
    if _newclass:
        resyncTarget = _swig_property(_uart.regSlave_resyncTarget_get, _uart.regSlave_resyncTarget_set)
    __swig_setmethods__["initiatorEngine"] = _uart.regSlave_initiatorEngine_set
    __swig_getmethods__["initiatorEngine"] = _uart.regSlave_initiatorEngine_get
    if _newclass:
        initiatorEngine = _swig_property(_uart.regSlave_initiatorEngine_get, _uart.regSlave_initiatorEngine_set)
    __swig_setmethods__["targetEngine"] = _uart.regSlave_targetEngine_set
    __swig_getmethods__["targetEngine"] = _uart.regSlave_targetEngine_get
    if _newclass:
        targetEngine = _swig_property(_uart.regSlave_targetEngine_get, _uart.regSlave_targetEngine_set)

    def regAccessResync(self, slaveId: 'int *', isRead: 'int', value: 'uint64_t *') -> "int":
        return _uart.regSlave_regAccessResync(self, slaveId, isRead, value)

    def regAccess(self, slaveId: 'int *', isRead: 'int', value: 'uint64_t *') -> "int":
        return _uart.regSlave_regAccess(self, slaveId, isRead, value)

    def getSlavePortResync(self, initiatorEngine: 'gv::clockEngine *', targetEngine: 'gv::clockEngine *') -> "gv::slavePort *":
        return _uart.regSlave_getSlavePortResync(self, initiatorEngine, targetEngine)
    __swig_destroy__ = _uart.delete_regSlave
    __del__ = lambda self: None
regSlave_swigregister = _uart.regSlave_swigregister
regSlave_swigregister(regSlave)

class Uart(component):
    __swig_setmethods__ = {}
    for _s in [component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uart, name, value)
    __swig_getmethods__ = {}
    for _s in [component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Uart, name)
    __repr__ = _swig_repr
    __swig_setmethods__["loopBack"] = _uart.Uart_loopBack_set
    __swig_getmethods__["loopBack"] = _uart.Uart_loopBack_get
    if _newclass:
        loopBack = _swig_property(_uart.Uart_loopBack_get, _uart.Uart_loopBack_set)
    __swig_setmethods__["baudrate"] = _uart.Uart_baudrate_set
    __swig_getmethods__["baudrate"] = _uart.Uart_baudrate_get
    if _newclass:
        baudrate = _swig_property(_uart.Uart_baudrate_get, _uart.Uart_baudrate_set)
    __swig_setmethods__["dumpFile"] = _uart.Uart_dumpFile_set
    __swig_getmethods__["dumpFile"] = _uart.Uart_dumpFile_get
    if _newclass:
        dumpFile = _swig_property(_uart.Uart_dumpFile_get, _uart.Uart_dumpFile_set)

    def build(self) -> "int":
        return _uart.Uart_build(self)

    def __init__(self):
        this = _uart.new_Uart()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _uart.delete_Uart
    __del__ = lambda self: None
Uart_swigregister = _uart.Uart_swigregister
Uart_swigregister(Uart)

# This file is compatible with both classic and new-style classes.


