help:

	@echo "Available make targets:"
	@echo "  clean      Remove the application temporay files (only the one for the specified configuration)"
	@echo "  distclean  Remove the application build directory (only the one for the specified configuration)"
	@echo "  all        Build the application"
	@echo "  dis        Disassemble application binary"
	@echo "  extract    Extract addresses for symbols defined in symbols variable"
	@echo "  run        Run the application"
	@echo "  install    Install libraries to the SDK (only when building libraries)"
	@echo "  config     Display the specified configuration"
	@echo "  flags      Display the tools flags"
	@echo "  env        Display available environment variables"
	@echo "  sdk.fetch  Gets latest SDK sources"
	@echo "  sdk.deps   Gets SDK dependencies"
	@echo "  sdk.build  Build SDK"
	@echo "  sdk        Equivalent to sdk.checkout sdk.deps sdk.build"
	@echo "  debug      Open vsim in GUI view mode to debug recorded wlf file"
	@echo "  cov_report Generate merged ucdb file from coverstore"
	@echo "  cov_gui    Open vsim in GUI viewcov mode with merged ucdb file"
	@echo "  cov_html   Open firefox to view merged ucdb in html mode"
	@echo "  cov_clean  Remove fe/sim/cov and fe/sim/cov_report_html"

	@echo
	@echo "Available make options (other configuration options are available, see make config):"
	@echo "  VERBOSE=1      			Display more details, for example when building SDK"
	@echo "  PLT_OPT=<val>  			Forward the value to the platform runner"
	@echo "  GROUPS=<val>   			When using an SDK target (e.g. sdk.build), this will restrict the command to an SDK group. It is by default equal to runtime"
	@echo "  MODULES=<val>  			When using an SDK target (e.g. sdk.build), this will restrict the command to an SDK module. It is by default empty"
	@echo "  gui=1          			Open modelsim using the GUI"
	@echo "  vsimScript=<script name>   Specify vsim script to be used for launching RTL simulation"
	@echo "  disOpt=<val>   			Add options when disassembling the binary"

	@echo
	@echo "Available make options for Questasim verification simulations:"
	@echo "  vsimCov=1  								Activate coverstore code coverage (saved in fe/sim/cov)"
	@echo "  vsimTestName=<val>  			  Set uid testname used for coverstore management"
	@echo "  recordWlf=YES			  			Activate WLF record during console mode simulation"
	@echo "  vsimDo='-do <name.do|tcl>'	Specify waveforms to be logged into WLF file"

	@echo
	@echo "Available make options for testbench customization for specific testcases:"
	@echo "  VSIM_FLAGS=expr0 ... exprn"
	@echo "     	-gUSE_FLL=<0|1>	 Select use of FLL or TEST clock"
	@echo "     	-gBAUDRATE=<val> Set UART baudrate"
	@echo "  USE_SDVT   					 Activate SmartDV features"
	@echo "  SDVT_DEBUG_LEVEL   	 Set SmartDV VIP debug level"
	@echo "  SDVT_CPI   					 Select SDVT CPI VIP as driver/monitor for GAP camera interface"
	@echo "  SDVT_CPI_TEST   			 Select SDVT CPI VIP testcase to be executed"
	@echo "  SDVT_CPI_CMDS   			 Select SDVT CPI VIP number of user images to be transmitted"
	@echo "  SDVT_CPI_CHECKER_ENA  Enable SDVT CPI VIP checker. It uses UART for now so UART_DRV_MON has to be set to VIP value."
	@echo "  SDVT_CPI_H_RES   		 Set SDVT CPI VIP horizontal resolution in testbench"
	@echo "  SDVT_CPI_V_RES   		 Set SDVT CPI VIP vertical resolution in testbench"
	@echo "  UART_DRV_MON=<VIP|>   If set, select UART VIP driver/monitor to connect UART to SDVT VIPs"
env:

	@echo "Available environment variables:"
	@echo "  PULP_RTL_INSTALL      Path to the RTL platform installation (containing modelsim.ini). Note that this does not need to be set when the platform is built with the SDK flow and is in this case automatically pointed to the right platform depending on the configuration"
	@echo "  PULP_CONFIGS          Specify the active configurations for which the SDK is built, the tests are launched, etc. Note that this env var is automatically set when the setup script generated by plpconf is sourced"


PULP_INSTALL_DIR ?= $(PULP_SDK_HOME)/install

define declareInstallFile

$(TARGET_PKG)/$(1): $(1)
	install -D $(1) $$@

INSTALL_HEADERS += $(TARGET_PKG)/$(1)

endef

ifeq '$(pulpCoreArchi)' 'or1k'
CRT0=crt0.or10n.S
else
ifeq '$(pulpCoreArchi)' 'or10n'
CRT0=crt0.or10n.S
else
ifeq '$(pulpCoreArchi)' 'or10nv2'
CRT0=crt0.or10n.S
else
ifeq '$(pulpChip)' 'pulp4'
CRT0=crt0.riscv.S
else
ifeq '$(pulpChip)' 'honey'
CRT0=crt0.riscv.S
else
ifeq '$(pulpChip)' 'exaconv'
CRT0=crt0.riscv.S
else
CRT0=crt0.riscv.fc.S
endif
endif
endif
endif
endif
endif




#
# OCL kernel (dynamic module)
#

define declareOclKernel

$(BUILD_DIR)/oclKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/$(1).so: $(PULP_OCL_KERNEL_SRCS_$(1))
	@mkdir -p `dirname $$@`
	$(PULP_INSTALL_DIR)/bin/clamc --nopipe --target_device $(PULP_OCL_KERNEL_TARGET) -o $$@ $(PULP_OCL_KERNEL_CFLAGS_$(1)) $(PULP_OCL_KERNEL_CFLAGS) $(PULP_OCL_KERNEL_LDFLAGS_$(1)) $(PULP_OCL_KERNEL_LDFLAGS) -- $$^

$(PULP_INSTALL_DIR)/kernels/ocl/$(pulpCoreArchi)/$(pulpCompiler)/$(1).so: $(BUILD_DIR)/oclKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/$(1).so
	@mkdir -p `dirname $$@`
	cp $$^ $$@ 

TARGETS += $(BUILD_DIR)/oclKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/$(1).so
CLEAN_TARGETS += $(BUILD_DIR)/oclKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/$(1).so
INSTALL_TARGETS += $(PULP_INSTALL_DIR)/kernels/ocl/$(pulpCoreArchi)/$(pulpCompiler)/$(1).so

endef



#
# OMP kernel (dynamic module)
#

define declareOmpKernel

$(eval OMP_KERNEL_$(1)_OBJS = $(patsubst %.c,$(BUILD_DIR)/ompKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/%.o,$(PULP_OMP_KERNEL_SRCS_$(1))))

-include $(OMP_KERNEL_$(1)_OBJS:.o=.d)

$(BUILD_DIR)/ompKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/%.o: %.c
	@mkdir -p `dirname $$@`
	touch libgomp.spec
	$(PULP_OMP_CC) -MMD -MP -c $$< -o $$@ $(PULP_OMP_KERNEL_CFLAGS_$(1)) $(PULP_OMP_KERNEL_CFLAGS) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS) -I$(PULP_INSTALL_DIR)/include

$(BUILD_DIR)/ompKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/$(1).so: $(OMP_KERNEL_$(1)_OBJS)
	@mkdir -p `dirname $$@`
	$(PULP_CC) $$^ -o $$@ $(PULP_OMP_KERNEL_LDFLAGS_$(1)) $(PULP_OMP_KERNEL_LDFLAGS)

$(PULP_INSTALL_DIR)/kernels/omp/$(pulpCoreArchi)/$(pulpCompiler)/$(1).so: $(BUILD_DIR)/ompKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/$(1).so
	@mkdir -p `dirname $$@`
	cp $$^ $$@ 

TARGETS += $(BUILD_DIR)/ompKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/$(1).so
CLEAN_TARGETS += $(BUILD_DIR)/ompKernels/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/$(1).so $(OMP_KERNEL_$(1)_OBJS)
INSTALL_TARGETS += $(PULP_INSTALL_DIR)/kernels/omp/$(pulpCoreArchi)/$(pulpCompiler)/$(1).so

endef







define declareHostLib


# pulpRtVersion has been added as a work-aound to avoid conflicts with parallel compilation


$(eval $(1)_OBJS = $(patsubst %.S,$(BUILD_DIR)/$(pulpCoreArchi)/$(pulpRtVersion)/$(1)/$(pulpCompiler)/%.o,$(patsubst %.c,$(BUILD_DIR)/$(pulpCoreArchi)/$(pulpRtVersion)/$(1)/$(pulpCompiler)/%.o,$(HOST_LIB_SRCS_$(1)))))

-include $($(1)_OBJS:.o=.d)

$(BUILD_DIR)/$(pulpCoreArchi)/$(pulpRtVersion)/$(1)/$(pulpCompiler)/%.o: %.c
	@mkdir -p `dirname $$@`
	$(HOST_CC) -MMD -MP -c $$< -o $$@ $(HOST_CFLAGS) $(HOST_LIB_CFLAGS_$(1))

$(BUILD_DIR)/$(pulpCoreArchi)/$(pulpRtVersion)/$(1)/$(pulpCompiler)/%.o: %.S
	@mkdir -p `dirname $$@`
	$(HOST_CC) -MMD -MP -DLANGUAGE_ASSEMBLY -c $$< -o $$@ $(HOST_CFLAGS) $(HOST_LIB_CFLAGS_$(1))

$(BUILD_DIR)/$(pulpCoreArchi)/$(pulpRtVersion)/lib$(1)-$(pulpCompiler).a: $($(1)_OBJS)
	@mkdir -p `dirname $$@`
	@rm -f $$@
	$(HOST_AR) -r $$@ $$^

$(PULP_INSTALL_DIR)/$(pulpCoreArchi)/lib/lib$(1)-$(pulpCompiler).a: $(BUILD_DIR)/$(pulpCoreArchi)/$(pulpRtVersion)/lib$(1)-$(pulpCompiler).a
	@mkdir -p `dirname $$@`
	cp $$^ $$@ 

TARGETS += $(BUILD_DIR)/$(pulpCoreArchi)/$(pulpRtVersion)/lib$(1)-$(pulpCompiler).a
CLEAN_DIRS += $(BUILD_DIR)/$(pulpCoreArchi)/$(pulpRtVersion)/$(1)/$(pulpCompiler)
CLEAN_TARGETS += $($(1)_OBJS)
INSTALL_TARGETS += $(PULP_INSTALL_DIR)/$(pulpCoreArchi)/lib/lib$(1)-$(pulpCompiler).a

endef

define declareLib

$(eval $(1)_OBJS = $(patsubst %.c,$(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/%.o,$(PULP_LIB_SRCS_$(1))))
$(eval $(1)_ASM_OBJS = $(patsubst %.S,$(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/%.o,$(PULP_LIB_ASM_SRCS_$(1))))
$(eval $(1)_OMP_OBJS = $(patsubst %.c,$(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/omp/%.o,$(PULP_LIB_OMP_SRCS_$(1))))

-include $($(1)_OBJS:.o=.d)
-include $($(1)_ASM_OBJS:.o=.d)
-include $($(1)_OMP_OBJS:.o=.d)

$(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/%.o: %.c
	@mkdir -p `dirname $$@`
	$(PULP_CC) -MMD -MP -c $$< -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

$(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/%.o: %.S
	@mkdir -p `dirname $$@`
	$(PULP_CC) -MMD -MP -c $$< -o $$@ -DLANGUAGE_ASSEMBLY $(PULP_LIB_CFLAGS_$(1)) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

$(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/%.bc: %.c
	$(PULP_CC) -emit-llvm -Xclang -MMD -MP -c $$< -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

$(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/omp/%.bc: %.c
	$(PULP_OMP_CC) -emit-llvm -Xclang -fopenmp=libiomp5 -fopenmp -MMD -MP -c $$< -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

$(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)/omp/%.o: %.c
	@mkdir -p `dirname $$@`
ifeq '$(pulpOmpVersion)' 'ovx'
	touch libgomp.spec
	$(PULP_OMP_CC) -MMD -MP -c $$< -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)
else
ifeq '$(pulpCompiler)' 'llvm'
	omp-clang -cc1 -triple i386-linux-gnu -std=gnu89 -fopenmp -O0 -S -emit-llvm -D__LLVM__ -I$(OR1K_LLVM_TOOLCHAIN)/or1kle-elf/include -I$(OR1K_LLVM_TOOLCHAIN)/lib/clang/3.8.0/include $(PULP_OMP_PATHS) $(PULP_INC_PATHS) $(PULP_DEFS) $$< -o $$@.ll
	$(PULP_CC) -c $$@.ll -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)
else
	touch libgomp.spec
	$(PULP_CC) -MMD -MP -c $$< -o $$@ -fopenmp $(PULP_LIB_CFLAGS_$(1)) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)
endif
endif

$(BUILD_DIR)/$(pulpCoreArchi)/lib$(1)-$(pulpChip)_$(pulpChipVersion)-$(pulpCompiler)-$(pulpRtVersion).a: $($(1)_ASM_OBJS) $($(1)_OBJS) $($(1)_OMP_OBJS)
	@mkdir -p `dirname $$@`
	@rm -f $$@
	$(PULP_AR) -r $$@ $$^

$(PULP_INSTALL_DIR)/$(pulpCoreArchi)/lib/lib$(1)-$(pulpChip)_$(pulpChipVersion)-$(pulpCompiler)-$(pulpRtVersion).a: $(BUILD_DIR)/$(pulpCoreArchi)/lib$(1)-$(pulpChip)_$(pulpChipVersion)-$(pulpCompiler)-$(pulpRtVersion).a
	@mkdir -p `dirname $$@`
	cp $$^ $$@ 


TARGETS += $(BUILD_DIR)/$(pulpCoreArchi)/lib$(1)-$(pulpChip)_$(pulpChipVersion)-$(pulpCompiler)-$(pulpRtVersion).a
CLEAN_DIRS += $(BUILD_DIR)/$(1)/$(pulpCoreArchi)/$(pulpChip)_$(pulpChipVersion)/$(pulpCompiler)/$(pulpRtVersion)
CLEAN_TARGETS += $($(1)_ASM_OBJS) $($(1)_OBJS) $($(1)_OMP_OBJS)
INSTALL_TARGETS += $(PULP_INSTALL_DIR)/$(pulpCoreArchi)/lib/lib$(1)-$(pulpChip)_$(pulpChipVersion)-$(pulpCompiler)-$(pulpRtVersion).a

endef

define declareDynLib

$(eval $(1)_DYN_OBJS = $(patsubst %.c,$(APP_BUILD_DIR)/%.o,$(PULP_LIB_SRCS_$(1))))
$(eval $(1)_DYN_ASM_OBJS = $(patsubst %.S,$(APP_BUILD_DIR)/%.o,$(PULP_LIB_ASM_SRCS_$(1))))
$(eval $(1)_DYN_OMP_OBJS = $(patsubst %.c,$(APP_BUILD_DIR)/omp/%.o,$(PULP_LIB_OMP_SRCS_$(1))))

-include $($(1)_DYN_OBJS:.o=.d)
-include $($(1)_DYN_ASM_OBJS:.o=.d)
-include $($(1)_DYN_OMP_OBJS:.o=.d)

$(APP_BUILD_DIR)/%.o: %.c
	@mkdir -p `dirname $$@`
	$(PULP_CC) -MMD -MP -c $$< -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_CFLAGS) $(PULP_DYN_CFLAGS) $(PULP_ROOT_CFLAGS)

$(APP_BUILD_DIR)/%.o: %.S
	@mkdir -p `dirname $$@`
	$(PULP_CC) -MMD -MP -c $$< -o $$@ -DLANGUAGE_ASSEMBLY $(PULP_LIB_CFLAGS_$(1)) $(PULP_CFLAGS) $(PULP_DYN_CFLAGS) $(PULP_ROOT_CFLAGS)

$(APP_BUILD_DIR)/%.bc: %.c
	$(PULP_CC) -emit-llvm -Xclang -MMD -MP -c $$< -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_CFLAGS) $(PULP_DYN_CFLAGS) $(PULP_ROOT_CFLAGS)

$(APP_BUILD_DIR)/omp/%.bc: %.c
	$(PULP_OMP_CC) -emit-llvm -Xclang -fopenmp=libiomp5 -fopenmp -MMD -MP -c $$< -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_DYN_CFLAGS) $(PULP_ROOT_CFLAGS)

$(APP_BUILD_DIR)/omp/%.o: %.c
	@mkdir -p `dirname $$@`
ifeq '$(pulpOmpVersion)' 'ovx'
	touch libgomp.spec
	$(PULP_OMP_CC) -MMD -MP -c $$< -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_DYN_CFLAGS) $(PULP_ROOT_CFLAGS)
else
ifeq '$(pulpCompiler)' 'llvm'
	omp-clang -cc1 -triple i386-linux-gnu -std=gnu89 -fopenmp -O0 -S -emit-llvm -D__LLVM__ -I$(OR1K_LLVM_TOOLCHAIN)/or1kle-elf/include -I$(OR1K_LLVM_TOOLCHAIN)/lib/clang/3.8.0/include $(PULP_OMP_PATHS) $(PULP_INC_PATHS) $(PULP_DEFS) $$< -o $$@.ll
	$(PULP_CC) -c $$@.ll -o $$@ $(PULP_LIB_CFLAGS_$(1)) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_DYN_CFLAGS) $(PULP_ROOT_CFLAGS)
else
	touch libgomp.spec
	$(PULP_CC) -MMD -MP -c $$< -o $$@ -fopenmp $(PULP_LIB_CFLAGS_$(1)) $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_DYN_CFLAGS) $(PULP_ROOT_CFLAGS)
endif
endif

$(APP_BUILD_DIR)/$(1): $($(1)_ASM_DYN_OBJS) $($(1)_DYN_OBJS) $($(1)_OMP_DYN_OBJS)
	@mkdir -p `dirname $$@`
	@rm -f $$@
	$(PULP_CC) -MMD -MP -o $$@ $$^ $(PULP_DYN_LDFLAGS) $(PULP_ARCH_LDFLAGS)

$(PULP_INSTALL_DIR)/$(pulpCoreArchi)/lib/dyn/$(1): $(APP_BUILD_DIR)/$(1)
	@mkdir -p `dirname $$@`
	cp $$^ $$@ 


TARGETS += $(APP_BUILD_DIR)/$(1)
CLEAN_DIRS += $(APP_BUILD_DIR)
CLEAN_TARGETS += $($(1)_ASM_DYN_OBJS) $($(1)_DYN_OBJS) $($(1)_OMP_DYN_OBJS)
INSTALL_TARGETS += $(PULP_INSTALL_DIR)/$(pulpCoreArchi)/lib/dyn/$(1)
COMPS_TARGETS += $(APP_BUILD_DIR)/$(1)

endef

PULP_APP_OBJS = $(patsubst %.cpp,$(APP_BUILD_DIR)/%.o,$(patsubst %.c,$(APP_BUILD_DIR)/%.o,$(PULP_APP_SRCS)))
PULP_APP_ASM_OBJS = $(patsubst %.S,$(APP_BUILD_DIR)/%.o,$(PULP_APP_ASM_SRCS))
ifneq '$(pulpOmpVersion)' 'new'
ifneq '$(pulpOmpVersion)' 'ovx'
ifdef PULP_APP
ifndef NO_CRT0
PULP_APP_OBJS += $(APP_BUILD_DIR)/crt0.o
endif
endif
else
ifdef PULP_APP
ifndef NO_SA_APP
PULP_ROOT_CFLAGS += -DSA_APP
endif
endif
endif
endif

PULP_APP_OMP_OBJS = $(patsubst %.c,$(APP_BUILD_DIR)/omp/%.o,$(PULP_APP_OMP_SRCS))
ifneq '$(pulpOmpVersion)' 'new'
ifneq '$(pulpOmpVersion)' 'ovx'
ifdef PULP_OMP_APP
PULP_APP_OMP_OBJS += $(APP_BUILD_DIR)/omp/crt0.o
endif
endif
endif

-include $(PULP_APP_ASM_OBJS:.o=.d)
-include $(PULP_APP_OBJS:.o=.d)
-include $(PULP_APP_OMP_OBJS:.o=.d)

$(APP_BUILD_DIR)/omp/%.o: %.c
	@mkdir -p `dirname $@`
ifeq '$(pulpOmpVersion)' 'ovx'
	touch libgomp.spec
	$(PULP_OMP_CC) -MMD -MP -c $< -o $@ $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)
else
ifeq '$(pulpCompiler)' 'llvm'
	omp-clang -cc1 -triple i386-linux-gnu -std=gnu89 -fopenmp -O0 -S -emit-llvm -D__LLVM__ -I$(OR1K_LLVM_TOOLCHAIN)/or1kle-elf/include -I$(OR1K_LLVM_TOOLCHAIN)/lib/clang/3.8.0/include $(PULP_OMP_INC_PATHS) $(PULP_INC_PATHS) $(PULP_DEFS) $< -o $@.ll
	$(PULP_CC) -c $@.ll -o $@ $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)
else
	touch libgomp.spec
	$(PULP_CC) -MMD -MP -c $< -o $@ -fopenmp $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)
endif
endif

ifeq '$(pulpChip)' 'pulpino'
SRC_PREFIX=pulpino/
endif

$(APP_BUILD_DIR)/crt0.o:  $(PULP_INSTALL_DIR)/src/$(SRC_PREFIX)$(CRT0)
	@mkdir -p `dirname $@`
	$(PULP_CC) -MMD -MP -c $< -o $@ $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

ifeq '$(pulpOmpVersion)' 'ovx'
PULP_APP_OBJS += $(APP_BUILD_DIR)/rtConf.o
PULP_RT_CONF = $(PULP_INSTALL_DIR)/src/rtConf.c
endif

$(APP_BUILD_DIR)/rtConf.o: $(PULP_RT_CONF)
	@mkdir -p `dirname $@`
	$(PULP_CC) -MMD -MP -c $< -o $@ $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

$(APP_BUILD_DIR)/omp/crt0.o:  $(PULP_INSTALL_DIR)/src/$(SRC_PREFIX)$(CRT0)
	@mkdir -p `dirname $@`
	$(PULP_CC) -MMD -MP -c $< -o $@ $(PULP_OMP_CFLAGS) $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS) -DOMP=1

$(APP_BUILD_DIR)/%.o: %.cpp
	@mkdir -p `dirname $@`
	$(PULP_CC) -MMD -MP -c $< -o $@ $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

$(APP_BUILD_DIR)/%.o: %.c
	@mkdir -p `dirname $@`
	$(PULP_CC) -MMD -MP -c $< -o $@ $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

$(APP_BUILD_DIR)/%.o: %.S
	@mkdir -p `dirname $@`
	$(PULP_CC) -MMD -MP -DLANGUAGE_ASSEMBLY -c $< -o $@ $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)

ifdef PULP_APP
$(APP_BUILD_DIR)/$(PULP_APP): $(PULP_APP_ASM_OBJS) $(PULP_APP_OBJS) $(PULP_APP_OMP_OBJS)
	mkdir -p `dirname $@`
ifeq '$(PULP_DYN_LIBS)' ''
	$(PULP_CC) -MMD -MP -o $@ $^ $(PULP_LDFLAGS) $(PULP_ROOT_LDFLAGS)
else
	$(PULP_CC) -MMD -MP -o $@ $^ $(PULP_LDFLAGS) $(PULP_ROOT_LDFLAGS) -mDIE=2 2> $(APP_BUILD_DIR)/residentExports.c
	$(PULP_CC) -MMD -MP -c $(APP_BUILD_DIR)/residentExports.c -o $(APP_BUILD_DIR)/residentExports.o $(PULP_CFLAGS) $(PULP_ROOT_CFLAGS)
	$(PULP_CC) -MMD -MP -o $@ $^ $(PULP_LDFLAGS) $(PULP_ROOT_LDFLAGS)  -mDIE=2 $(APP_BUILD_DIR)/residentExports.o
endif
	pulp-run --platform=$(platform) --dir=$(APP_BUILD_DIR) $(pulpRunOpt) $(PLT_OPT) prepare

$(PULP_INSTALL_DIR)/$(pulpCoreArchi)/bin/$(PULP_APP): $(APP_BUILD_DIR)/$(PULP_APP)
	mkdir -p `dirname $@`
	cp $< $@

TARGETS += $(APP_BUILD_DIR)/$(PULP_APP)
CLEAN_DIRS += $(APP_BUILD_DIR)
CLEAN_TARGETS += $(PULP_APP_ASM_OBJS) $(PULP_APP_OBJS) $(PULP_APP_OMP_OBJS)
RUN_BINARY = $(PULP_APP)
INSTALL_TARGETS += $(PULP_INSTALL_DIR)/$(pulpCoreArchi)/bin/$(PULP_APP)
endif

ifdef PULP_OMP_APP
$(APP_BUILD_DIR)/$(PULP_OMP_APP): $(PULP_APP_ASM_OBJS) $(PULP_APP_OBJS) $(PULP_APP_OMP_OBJS)
	mkdir -p `dirname $@`
ifeq '$(PULP_DYN_LIBS)' ''
	$(PULP_CC) -MMD -MP -o $@ $^ $(PULP_LDFLAGS) $(PULP_ROOT_LDFLAGS) $(PULP_OMP_LDFLAGS)
else
	$(PULP_CC) -MMD -MP -o $@ $^ $(PULP_LDFLAGS) $(PULP_ROOT_LDFLAGS) $(PULP_OMP_LDFLAGS) -mDIE=2 &> $(APP_BUILD_DIR)/residentExports.c
	$(PULP_CC) -MMD -MP -o $@ $^ $(PULP_LDFLAGS) $(PULP_ROOT_LDFLAGS) $(PULP_OMP_LDFLAGS) $(APP_BUILD_DIR)/residentExports.c
endif
	pulp-run --platform=$(platform) --dir=$(APP_BUILD_DIR) $(pulpRunOpt) $(PLT_OPT) prepare

$(PULP_INSTALL_DIR)/$(pulpCoreArchi)/bin/$(PULP_OMP_APP): $(APP_BUILD_DIR)/$(PULP_OMP_APP)
	mkdir -p `dirname $@`
	cp $< $@

TARGETS += $(APP_BUILD_DIR)/$(PULP_OMP_APP)
CLEAN_DIRS += $(APP_BUILD_DIR)
CLEAN_TARGETS += $(PULP_APP_ASM_OBJS) $(PULP_APP_OBJS) $(PULP_APP_OMP_OBJS)
RUN_BINARY = $(PULP_OMP_APP)
INSTALL_TARGETS += $(PULP_INSTALL_DIR)/$(pulpCoreArchi)/bin/$(PULP_OMP_APP)
endif

$(foreach kernel, $(PULP_OCL_KERNELS), $(eval $(call declareOclKernel,$(kernel))))

$(foreach kernel, $(PULP_OMP_KERNELS), $(eval $(call declareOmpKernel,$(kernel))))

$(foreach lib, $(PULP_LIBS), $(eval $(call declareLib,$(lib))))

$(foreach lib, $(PULP_DYN_LIBS), $(eval $(call declareDynLib,$(lib))))

$(foreach comp, $(PULP_COMPS), $(eval $(call declareComp,$(comp))))

$(foreach lib, $(HOST_LIBS), $(eval $(call declareHostLib,$(lib))))

$(foreach file, $(INSTALL_FILES), $(eval $(call declareInstallFile,$(file))))

dis:
	$(PULP_OBJDUMP) -d $(APP_BUILD_DIR)/$(RUN_BINARY) $(disOpt)

extract:
	for symbol in $(symbols); do $(PULP_PREFIX)readelf -s $(APP_BUILD_DIR)/$(RUN_BINARY) | grep $$symbol | gawk '{print $$2}' > $(APP_BUILD_DIR)/$$symbol.txt; done

disdump:
	$(PULP_OBJDUMP) -d $(APP_BUILD_DIR)/$(RUN_BINARY) $(disOpt) > $(APP_BUILD_DIR)/$(RUN_BINARY).s
	@echo
	@echo  "Disasembled binary to $(APP_BUILD_DIR)/$(RUN_BINARY).s"

clean:
	rm -rf $(CLEAN_TARGETS)

distclean:
	rm -rf $(CLEAN_DIRS)

build: $(TARGETS)

all: genPulpConfig build prepare

install: $(INSTALL_TARGETS)

header: $(INSTALL_HEADERS)

ifeq '$(COMPS_TARGETS)' ''
flash:
else

pulpRunOpt += --flash-stimuli=$(APP_BUILD_DIR)/flash.slm

flash:
	plp_mkflash $(foreach comp,$(COMPS_TARGETS),--comp=$(comp)) --stimuli=$(APP_BUILD_DIR)/flash.slm
endif

ifdef KCG
ifeq '$(platform)' 'gvsoc'
pulpRunOpt += --kcg=pe$(KCG)
else
ifeq '$(pulpCoreArchi)' 'riscv'
pulpRunOpt += --kcg=trace_core_0$(KCG).log
else
ifeq '$(pulpCoreArchi)' 'riscv-rvc'
pulpRunOpt += --kcg=trace_core_0$(KCG).log
else
pulpRunOpt += --kcg=trace_core_0$(KCG).bin
endif
endif
endif
endif

debug:
	@vsim -view $(APP_BUILD_DIR)/gap.wlf "$(vsimDo)"

cov_report:
	@vcover merge -out $(VSIM_PATH)/cov/gap_merged.ucdb $(VSIM_PATH)/cov
	@vcover report -details -source -html -htmldir $(VSIM_PATH)/cov_report_html $(VSIM_PATH)/cov/gap_merged.ucdb

cov_gui:
	@vsim -viewcov $(VSIM_PATH)/cov/gap_merged.ucdb	-do 'add testbrowser $(VSIM_PATH)/cov/gap_merged.ucdb' 

cov_html:
	@firefox	$(VSIM_PATH)/cov_report_html/index.html &

cov_clean:
	@rm -rf $(VSIM_PATH)/cov $(VSIM_PATH)/cov_report_html

TESTCASE_DIR?=$(PWD)

build_rtl:
	@cd $(VSIM_PATH) && make build_rtl && cd $(TESTCASE_DIR)

build_tb:
	@cd $(VSIM_PATH) && make build_tb && cd $(TESTCASE_DIR)

run:
	pulp-run --platform=$(platform) --dir=$(APP_BUILD_DIR) $(pulpRunOpt) $(PLT_OPT)

bitstream:
	pulp-run --platform=$(platform) --dir=$(APP_BUILD_DIR) $(pulpRunOpt) $(PLT_OPT) bitstream

prepare: build flash

config:
	@$(PULP_SDK_HOME)/install/bin/pulp-flags --config $(PULP_FLAGS_OPT)

flags:
	@$(PULP_SDK_HOME)/install/bin/pulp-flags --flags $(PULP_FLAGS_OPT)
