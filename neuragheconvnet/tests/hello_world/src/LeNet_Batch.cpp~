// This code is auto-generated. Do not edit.

#include "LeNet_Batch.h"

#include "assert.h"
// void print_data(DATA * data, int size, const char*filename){
// #ifdef _DEBUG_	
// 	FILE * f = fopen(filename, "w");
// 	assert(f!=NULL);
// 	#ifdef _FIXED_
// 		const char * format_string = "%d\n";
// 	#else
// 		const char * format_string = "%f\n";
// 	#endif
// 	printf("Writing to %s ...\n", filename);
// 	for(int i=0; i<size; i++){
// 		fprintf(f, format_string, data[i]);
// 	}
// 	fclose(f);
// #endif
// }

// global variables

#if !(_RELEASE_)
	#define _rprintf_(...) printf(__VA_ARGS__)
	#define spatconv_forward_hw(...) spatconv_forward_hw_sync(__VA_ARGS__)
	#define basicBlock_hw(...) basicBlock_hw_sync(__VA_ARGS__)
	#ifdef _DEBUG_
		#define _dprintf_(...) printf(__VA_ARGS__)
		#define _dprint_data_(...) print_data(__VA_ARGS__)
		#define _ddeinterlace_(...) deinterlace(__VA_ARGS__)
	#else
		#define _dprintf_(...) ;
		#define _dprint_data_(...) ;
		#define _ddeinterlace_(...) ;
	#endif
#else
	#define _rprintf_(...) ;
	#define _dprintf_(...) ;
	#define _dprint_data_(...) ;
	#define _ddeinterlace_(...) ;
#endif

// global variables
SOCMAP soc;
DATA* wPointer;


SPATCONV scale1_conv2d_5x5_0_param;
SPATCONV scale1_conv2d_5x5_1_param;
SPATCONV scale1_conv2d_5x5_2_param;
SPATCONV scale1_conv2d_5x5_3_param;
SPATCONV scale2_block0_A_conv2d_param;
SPATCONV scale2_block0_B_conv2d_param;
SPATCONV scale2_block1_A_conv2d_param;
SPATCONV scale2_block1_B_conv2d_param;
SPATCONV scale3_block0_shortcut_conv2d_param;
SPATCONV scale3_block0_A_conv2d_param;
SPATCONV scale3_block0_B_conv2d_param;
SPATCONV scale3_block1_A_conv2d_param;
SPATCONV scale3_block1_B_conv2d_param;
SPATCONV scale4_block0_shortcut_conv2d_param;
SPATCONV scale4_block0_A_conv2d_param;
SPATCONV scale4_block0_B_conv2d_param;
SPATCONV scale4_block1_A_conv2d_param;
SPATCONV scale4_block1_B_conv2d_param;
SPATCONV scale5_block0_shortcut_conv2d_param;
SPATCONV scale5_block0_A_conv2d_param;
SPATCONV scale5_block0_B_conv2d_param;
SPATCONV scale5_block1_A_conv2d_param;
SPATCONV scale5_block1_B_conv2d_param;
LINEAR_FP16 xw_plus_b_MatMul_param;


DATA *scale1_conv2d_5x5_0_out;
DATA *scale1_conv2d_5x5_1_out;
DATA *scale1_conv2d_5x5_2_out;
DATA *scale1_conv2d_5x5_3_out;
DATA *tmp_out; 

DATA scale1_conv2d_padding_output[3 * 228 * 228];
DATA scale1_conv2d_merge_output[64 * 112 * 112];
DATA scale1_Relu_output[64 * 112 * 112];
DATA scale2_max_pool_output[64 * 56 * 56];	
DATA scale2_block0_A_conv2d_output[200704];	
DATA scale2_block0_B_conv2d_output[200704];
DATA scale2_block0_Residual_Add_Add_output[64 * 56 * 56];	
DATA scale2_block1_A_conv2d_output[200704];	
DATA scale2_block1_B_conv2d_output[200704];	
DATA scale3_block0_shortcut_conv2d_output[100352];	
DATA scale3_block0_A_conv2d_output[100352];	
DATA scale3_block0_B_conv2d_output[100352];	
DATA scale3_block1_A_conv2d_output[100352];	
DATA scale3_block1_B_conv2d_output[100352];	
DATA scale4_block0_shortcut_conv2d_output[50176];	
DATA scale4_block0_A_conv2d_output[50176];	
DATA scale4_block0_B_conv2d_output[50176];	
DATA scale4_block1_A_conv2d_output[50176];	
DATA scale4_block1_B_conv2d_output[50176];	
DATA scale5_block0_shortcut_conv2d_output[25088];	
DATA scale5_block0_A_conv2d_output[25088];	
DATA scale5_block0_B_conv2d_output[25088];
DATA scale5_block0_B_conv2d_output_hw[512 * 8 * 7];	
DATA scale5_block1_A_conv2d_output[25088];	
DATA scale5_block1_B_conv2d_output[25088];
DATA scale5_block1_B_conv2d_output_hw[512 * 8 * 7];
DATA scale2_block0_Shortcut[64 * 56 * 56];
DATA avg_pool_output[512 * 1 * 1];
DATA scale2_block1_Shortcut[64 * 56 * 56];
DATA scale2_block1_Residual_Add_Add_output[64 * 56 * 56];
DATA scale3_block0_Shortcut[128 * 28 * 28];	
DATA scale3_block0_Residual_Add_Add_output[128 * 28 * 28];
DATA scale3_block1_Shortcut[128 * 28 * 28];	
DATA scale3_block1_Residual_Add_Add_output[128 * 28 * 28];
DATA scale4_block0_Shortcut[256 * 14 * 14];	
DATA scale4_block0_Residual_Add_Add_output[256 * 14 * 14];
DATA scale4_block1_Shortcut[256 * 14 * 14];
DATA scale4_block1_Residual_Add_Add_output[256 * 14 * 14];	
DATA scale5_block0_Shortcut[512 * 8 * 7];
DATA scale5_block0_Residual_Add_Add_output[512 * 7 * 7];
DATA scale5_block0_Residual_Add_Add_output_hw[512 * 8 * 7];
DATA scale5_block1_Shortcut[512 * 8 * 7];
DATA scale5_block1_Residual_Add_Add_output[512 * 7 * 7];
DATA scale5_block1_Residual_Add_Add_output_tmp[512 * 8 * 7];


void init_platform(char* bitstream){
	init_soc(&soc, &wPointer, _MAXMEM_, 0, bitstream);
}

void cnnMainInit(VARNAME load_data_dir)
{
	double time;
	VARNAME filename;

	SIZE scale1_conv2d_5x5_out_dim = 64 * 113 * 114;
	scale1_conv2d_5x5_0_out = (DATA*)neu_DDRmalloc(scale1_conv2d_5x5_out_dim*sizeof(DATA));
	scale1_conv2d_5x5_1_out = (DATA*)neu_DDRmalloc(scale1_conv2d_5x5_out_dim*sizeof(DATA));
	scale1_conv2d_5x5_2_out = (DATA*)neu_DDRmalloc(scale1_conv2d_5x5_out_dim*sizeof(DATA));
	scale1_conv2d_5x5_3_out = (DATA*)neu_DDRmalloc(scale1_conv2d_5x5_out_dim*sizeof(DATA));
	tmp_out = (DATA*)neu_DDRmalloc(_MAXMEM_*sizeof(DATA));

	/*
	 * Convolution layer
	 * IF = 3 x 226 x 226 --> OF = 64 x 113 x 113
	 * W 64 x 3 x 5 x 5
	 * Pad    2x2
	 * Stride 2x2
	 */
	scale1_conv2d_5x5_0_param = spatconv_create();
	scale1_conv2d_5x5_0_param->pout = 64;
	scale1_conv2d_5x5_0_param->pin = 3;
	scale1_conv2d_5x5_0_param->kern_s[0] = 64;
	scale1_conv2d_5x5_0_param->kern_s[1] = 3;
	scale1_conv2d_5x5_0_param->kern_s[2] = 5;
	scale1_conv2d_5x5_0_param->kern_s[3] = 5;
	scale1_conv2d_5x5_0_param->maxog = 4;
	
	// preprocessed weight dim = 7168
	// original weight shape = 64 x 3 x 5 x 5;
	sprintf(filename, "%s/scale1_conv2d_5x5_0_weights_array_file", load_data_dir);
	scale1_conv2d_5x5_0_param->kernel = (DATA*)neu_DDRmalloc(7168*sizeof(DATA));
	load_fixed(filename,7168,scale1_conv2d_5x5_0_param->kernel);
		
	SIZE scale1_conv2d_5x5_0_bias_dim = 64;
	scale1_conv2d_5x5_0_param->bias = (DATA*)neu_DDRmalloc(scale1_conv2d_5x5_0_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale1_conv2d_5x5_0_bias_array_file", load_data_dir);
	load_fixed(filename,scale1_conv2d_5x5_0_bias_dim,scale1_conv2d_5x5_0_param->bias);
	
	SIZE scale1_conv2d_5x5_0_dim = 64 * 113 * 113;
	
	
	/*
	 * Convolution layer
	 * IF = 3 x 226 x 226 --> OF = 64 x 113 x 113
	 * W 64 x 3 x 5 x 5
	 * Pad    2x2
	 * Stride 2x2
	 */
	scale1_conv2d_5x5_1_param = spatconv_create();
	scale1_conv2d_5x5_1_param->pout = 64;
	scale1_conv2d_5x5_1_param->pin = 3;
	scale1_conv2d_5x5_1_param->kern_s[0] = 64;
	scale1_conv2d_5x5_1_param->kern_s[1] = 3;
	scale1_conv2d_5x5_1_param->kern_s[2] = 5;
	scale1_conv2d_5x5_1_param->kern_s[3] = 5;
	scale1_conv2d_5x5_1_param->maxog = 4;
	
	// preprocessed weight dim = 7168
	// original weight shape = 64 x 3 x 5 x 5;
	sprintf(filename, "%s/scale1_conv2d_5x5_1_weights_array_file", load_data_dir);
	scale1_conv2d_5x5_1_param->kernel = (DATA*)neu_DDRmalloc(7168*sizeof(DATA));
	load_fixed(filename,7168,scale1_conv2d_5x5_1_param->kernel);
	
	SIZE scale1_conv2d_5x5_1_bias_dim = 64;
	scale1_conv2d_5x5_1_param->bias = (DATA*)neu_DDRmalloc(scale1_conv2d_5x5_1_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale1_conv2d_5x5_1_bias_array_file", load_data_dir);
	load_fixed(filename,scale1_conv2d_5x5_1_bias_dim,scale1_conv2d_5x5_1_param->bias);
	
	SIZE scale1_conv2d_5x5_1_dim = 64 * 113 * 113;
	
	
	/*
	 * Convolution layer
	 * IF = 3 x 226 x 226 --> OF = 64 x 113 x 113
	 * W 64 x 3 x 5 x 5
	 * Pad    2x2
	 * Stride 2x2
	 */
	scale1_conv2d_5x5_2_param = spatconv_create();
	scale1_conv2d_5x5_2_param->pout = 64;
	scale1_conv2d_5x5_2_param->pin = 3;
	scale1_conv2d_5x5_2_param->kern_s[0] = 64;
	scale1_conv2d_5x5_2_param->kern_s[1] = 3;
	scale1_conv2d_5x5_2_param->kern_s[2] = 5;
	scale1_conv2d_5x5_2_param->kern_s[3] = 5;
	scale1_conv2d_5x5_2_param->maxog = 4;
	
	// preprocessed weight dim = 7168
	// original weight shape = 64 x 3 x 5 x 5;
	sprintf(filename, "%s/scale1_conv2d_5x5_2_weights_array_file", load_data_dir);
	scale1_conv2d_5x5_2_param->kernel = (DATA*)neu_DDRmalloc(7168*sizeof(DATA));	
	load_fixed(filename,7168,scale1_conv2d_5x5_2_param->kernel);
	
	SIZE scale1_conv2d_5x5_2_bias_dim = 64;
	scale1_conv2d_5x5_2_param->bias = (DATA*)neu_DDRmalloc(scale1_conv2d_5x5_2_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale1_conv2d_5x5_2_bias_array_file", load_data_dir);
	load_fixed(filename,scale1_conv2d_5x5_2_bias_dim,scale1_conv2d_5x5_2_param->bias);
	
	SIZE scale1_conv2d_5x5_2_dim = 64 * 113 * 113;
	
	
	/*
	 * Convolution layer
	 * IF = 3 x 226 x 226 --> OF = 64 x 113 x 113
	 * W 64 x 3 x 5 x 5
	 * Pad    2x2
	 * Stride 2x2
	 */
	scale1_conv2d_5x5_3_param = spatconv_create();
	scale1_conv2d_5x5_3_param->pout = 64;
	scale1_conv2d_5x5_3_param->pin = 3;
	scale1_conv2d_5x5_3_param->kern_s[0] = 64;
	scale1_conv2d_5x5_3_param->kern_s[1] = 3;
	scale1_conv2d_5x5_3_param->kern_s[2] = 5;
	scale1_conv2d_5x5_3_param->kern_s[3] = 5;
	scale1_conv2d_5x5_3_param->maxog = 4;
	
	// preprocessed weight dim = 7168
	// original weight shape = 64 x 3 x 5 x 5;
	sprintf(filename, "%s/scale1_conv2d_5x5_3_weights_array_file", load_data_dir);
	scale1_conv2d_5x5_3_param->kernel = (DATA*)neu_DDRmalloc(7168*sizeof(DATA));
	load_fixed(filename,7168,scale1_conv2d_5x5_3_param->kernel);
	
	SIZE scale1_conv2d_5x5_3_bias_dim = 64;
	scale1_conv2d_5x5_3_param->bias = (DATA*)neu_DDRmalloc(scale1_conv2d_5x5_3_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale1_conv2d_5x5_3_bias_array_file", load_data_dir);
	load_fixed(filename,scale1_conv2d_5x5_3_bias_dim,scale1_conv2d_5x5_3_param->bias);
	
	SIZE scale1_conv2d_5x5_3_dim = 64 * 113 * 113;

	SIZE scale2_max_pool_dim = 64 * 56 * 56;

	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 64 x 56 x 56
	 * W 64 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale2_block0_A_conv2d_param = spatconv_create();
	scale2_block0_A_conv2d_param->pout = 64;
	scale2_block0_A_conv2d_param->pin = 64;
	scale2_block0_A_conv2d_param->kern_s[0] = 64;
	scale2_block0_A_conv2d_param->kern_s[1] = 64;
	scale2_block0_A_conv2d_param->kern_s[2] = 3;
	scale2_block0_A_conv2d_param->kern_s[3] = 3;
	scale2_block0_A_conv2d_param->maxog = 16;
	
	// preprocessed weight dim = 43008
	// original weight shape = 64 x 64 x 3 x 3;
	sprintf(filename, "%s/scale2_block0_A_conv2d_weights_array_file", load_data_dir);
	scale2_block0_A_conv2d_param->kernel = (DATA*)neu_DDRmalloc(43008*sizeof(DATA));
	load_fixed(filename,43008,scale2_block0_A_conv2d_param->kernel);
	
	SIZE scale2_block0_A_conv2d_bias_dim = 64;
	scale2_block0_A_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale2_block0_A_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale2_block0_A_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale2_block0_A_conv2d_bias_dim,scale2_block0_A_conv2d_param->bias);
	
	SIZE scale2_block0_A_conv2d_dim = 64 * 56 * 56;
	
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 64 x 56 x 56
	 * W 64 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale2_block0_B_conv2d_param = spatconv_create();
	scale2_block0_B_conv2d_param->pout = 64;
	scale2_block0_B_conv2d_param->pin = 64;
	scale2_block0_B_conv2d_param->kern_s[0] = 64;
	scale2_block0_B_conv2d_param->kern_s[1] = 64;
	scale2_block0_B_conv2d_param->kern_s[2] = 3;
	scale2_block0_B_conv2d_param->kern_s[3] = 3;
	scale2_block0_B_conv2d_param->maxog = 16;
	
	// preprocessed weight dim = 43008
	// original weight shape = 64 x 64 x 3 x 3;
	sprintf(filename, "%s/scale2_block0_B_conv2d_weights_array_file", load_data_dir);
	scale2_block0_B_conv2d_param->kernel = (DATA*)neu_DDRmalloc(43008*sizeof(DATA));
	load_fixed(filename,43008,scale2_block0_B_conv2d_param->kernel);
	
	SIZE scale2_block0_B_conv2d_bias_dim = 64;
	scale2_block0_B_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale2_block0_B_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale2_block0_B_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale2_block0_B_conv2d_bias_dim,scale2_block0_B_conv2d_param->bias);
	
	SIZE scale2_block0_B_conv2d_dim = 64 * 56 * 56;
	
	
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 64 x 56 x 56
	 * W 64 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale2_block1_A_conv2d_param = spatconv_create();
	scale2_block1_A_conv2d_param->pout = 64;
	scale2_block1_A_conv2d_param->pin = 64;
	scale2_block1_A_conv2d_param->kern_s[0] = 64;
	scale2_block1_A_conv2d_param->kern_s[1] = 64;
	scale2_block1_A_conv2d_param->kern_s[2] = 3;
	scale2_block1_A_conv2d_param->kern_s[3] = 3;
	scale2_block1_A_conv2d_param->maxog = 16;
	
	// preprocessed weight dim = 43008
	// original weight shape = 64 x 64 x 3 x 3;
	sprintf(filename, "%s/scale2_block1_A_conv2d_weights_array_file", load_data_dir);
	scale2_block1_A_conv2d_param->kernel = (DATA*)neu_DDRmalloc(43008*sizeof(DATA));
	load_fixed(filename,43008,scale2_block1_A_conv2d_param->kernel);
	
	SIZE scale2_block1_A_conv2d_bias_dim = 64;
	scale2_block1_A_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale2_block1_A_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale2_block1_A_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale2_block1_A_conv2d_bias_dim,scale2_block1_A_conv2d_param->bias);
	
	SIZE scale2_block1_A_conv2d_dim = 64 * 56 * 56;
	
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 64 x 56 x 56
	 * W 64 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale2_block1_B_conv2d_param = spatconv_create();
	scale2_block1_B_conv2d_param->pout = 64;
	scale2_block1_B_conv2d_param->pin = 64;
	scale2_block1_B_conv2d_param->kern_s[0] = 64;
	scale2_block1_B_conv2d_param->kern_s[1] = 64;
	scale2_block1_B_conv2d_param->kern_s[2] = 3;
	scale2_block1_B_conv2d_param->kern_s[3] = 3;
	scale2_block1_B_conv2d_param->maxog = 16;
	
	// preprocessed weight dim = 43008
	// original weight shape = 64 x 64 x 3 x 3;
	sprintf(filename, "%s/scale2_block1_B_conv2d_weights_array_file", load_data_dir);
	scale2_block1_B_conv2d_param->kernel = (DATA*)neu_DDRmalloc(43008*sizeof(DATA));
	load_fixed(filename,43008,scale2_block1_B_conv2d_param->kernel);
	
	SIZE scale2_block1_B_conv2d_bias_dim = 64;
	scale2_block1_B_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale2_block1_B_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale2_block1_B_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale2_block1_B_conv2d_bias_dim,scale2_block1_B_conv2d_param->bias);
	
	SIZE scale2_block1_B_conv2d_dim = 64 * 56 * 56;
	
	
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 128 x 28 x 28
	 * W 128 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	scale3_block0_shortcut_conv2d_param = spatconv_create();
	scale3_block0_shortcut_conv2d_param->pout = 128;
	scale3_block0_shortcut_conv2d_param->pin = 64;
	scale3_block0_shortcut_conv2d_param->kern_s[0] = 128;
	scale3_block0_shortcut_conv2d_param->kern_s[1] = 64;
	scale3_block0_shortcut_conv2d_param->kern_s[2] = 3;
	scale3_block0_shortcut_conv2d_param->kern_s[3] = 3;
	scale3_block0_shortcut_conv2d_param->maxog = 16;
	
	// preprocessed weight dim = 86016
	// original weight shape = 128 x 64 x 3 x 3;
	sprintf(filename, "%s/scale3_block0_shortcut_conv2d_weights_array_file", load_data_dir);
	scale3_block0_shortcut_conv2d_param->kernel = (DATA*)neu_DDRmalloc(86016*sizeof(DATA));
	load_fixed(filename,86016,scale3_block0_shortcut_conv2d_param->kernel);
	
	SIZE scale3_block0_shortcut_conv2d_bias_dim = 128;
	scale3_block0_shortcut_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale3_block0_shortcut_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale3_block0_shortcut_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale3_block0_shortcut_conv2d_bias_dim,scale3_block0_shortcut_conv2d_param->bias);
	
	SIZE scale3_block0_shortcut_conv2d_dim = 128 * 28 * 28;
	
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 128 x 28 x 28
	 * W 128 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	scale3_block0_A_conv2d_param = spatconv_create();
	scale3_block0_A_conv2d_param->pout = 128;
	scale3_block0_A_conv2d_param->pin = 64;
	scale3_block0_A_conv2d_param->kern_s[0] = 128;
	scale3_block0_A_conv2d_param->kern_s[1] = 64;
	scale3_block0_A_conv2d_param->kern_s[2] = 3;
	scale3_block0_A_conv2d_param->kern_s[3] = 3;
	scale3_block0_A_conv2d_param->maxog = 16;
	
	// preprocessed weight dim = 86016
	// original weight shape = 128 x 64 x 3 x 3;
	sprintf(filename, "%s/scale3_block0_A_conv2d_weights_array_file", load_data_dir);
	scale3_block0_A_conv2d_param->kernel = (DATA*)neu_DDRmalloc(86016*sizeof(DATA));
	load_fixed(filename,86016,scale3_block0_A_conv2d_param->kernel);
	
	SIZE scale3_block0_A_conv2d_bias_dim = 128;
	scale3_block0_A_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale3_block0_A_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale3_block0_A_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale3_block0_A_conv2d_bias_dim,scale3_block0_A_conv2d_param->bias);
	
	SIZE scale3_block0_A_conv2d_dim = 128 * 28 * 28;
	
	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 128 x 28 x 28
	 * W 128 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale3_block0_B_conv2d_param = spatconv_create();
	scale3_block0_B_conv2d_param->pout = 128;
	scale3_block0_B_conv2d_param->pin = 128;
	scale3_block0_B_conv2d_param->kern_s[0] = 128;
	scale3_block0_B_conv2d_param->kern_s[1] = 128;
	scale3_block0_B_conv2d_param->kern_s[2] = 3;
	scale3_block0_B_conv2d_param->kern_s[3] = 3;
	scale3_block0_B_conv2d_param->maxog = 32;
	
	// preprocessed weight dim = 157696
	// original weight shape = 128 x 128 x 3 x 3;
	sprintf(filename, "%s/scale3_block0_B_conv2d_weights_array_file", load_data_dir);
	scale3_block0_B_conv2d_param->kernel = (DATA*)neu_DDRmalloc(157696*sizeof(DATA));
	load_fixed(filename,157696,scale3_block0_B_conv2d_param->kernel);
	
	SIZE scale3_block0_B_conv2d_bias_dim = 128;
	scale3_block0_B_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale3_block0_B_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale3_block0_B_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale3_block0_B_conv2d_bias_dim,scale3_block0_B_conv2d_param->bias);
	
	SIZE scale3_block0_B_conv2d_dim = 128 * 28 * 28;
	
	
	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 128 x 28 x 28
	 * W 128 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale3_block1_A_conv2d_param = spatconv_create();
	scale3_block1_A_conv2d_param->pout = 128;
	scale3_block1_A_conv2d_param->pin = 128;
	scale3_block1_A_conv2d_param->kern_s[0] = 128;
	scale3_block1_A_conv2d_param->kern_s[1] = 128;
	scale3_block1_A_conv2d_param->kern_s[2] = 3;
	scale3_block1_A_conv2d_param->kern_s[3] = 3;
	scale3_block1_A_conv2d_param->maxog = 32;
	
	// preprocessed weight dim = 157696
	// original weight shape = 128 x 128 x 3 x 3;
	sprintf(filename, "%s/scale3_block1_A_conv2d_weights_array_file", load_data_dir);
	scale3_block1_A_conv2d_param->kernel = (DATA*)neu_DDRmalloc(157696*sizeof(DATA));
	load_fixed(filename,157696,scale3_block1_A_conv2d_param->kernel);
	
	SIZE scale3_block1_A_conv2d_bias_dim = 128;
	scale3_block1_A_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale3_block1_A_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale3_block1_A_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale3_block1_A_conv2d_bias_dim,scale3_block1_A_conv2d_param->bias);
	
	SIZE scale3_block1_A_conv2d_dim = 128 * 28 * 28;
	
	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 128 x 28 x 28
	 * W 128 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale3_block1_B_conv2d_param = spatconv_create();
	scale3_block1_B_conv2d_param->pout = 128;
	scale3_block1_B_conv2d_param->pin = 128;
	scale3_block1_B_conv2d_param->kern_s[0] = 128;
	scale3_block1_B_conv2d_param->kern_s[1] = 128;
	scale3_block1_B_conv2d_param->kern_s[2] = 3;
	scale3_block1_B_conv2d_param->kern_s[3] = 3;
	scale3_block1_B_conv2d_param->maxog = 32;
	
	// preprocessed weight dim = 157696
	// original weight shape = 128 x 128 x 3 x 3;
	sprintf(filename, "%s/scale3_block1_B_conv2d_weights_array_file", load_data_dir);
	scale3_block1_B_conv2d_param->kernel = (DATA*)neu_DDRmalloc(157696*sizeof(DATA));
	load_fixed(filename,157696,scale3_block1_B_conv2d_param->kernel);
	
	SIZE scale3_block1_B_conv2d_bias_dim = 128;
	scale3_block1_B_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale3_block1_B_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale3_block1_B_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale3_block1_B_conv2d_bias_dim,scale3_block1_B_conv2d_param->bias);
	
	SIZE scale3_block1_B_conv2d_dim = 128 * 28 * 28;
	
	
	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 256 x 14 x 14
	 * W 256 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	scale4_block0_shortcut_conv2d_param = spatconv_create();
	scale4_block0_shortcut_conv2d_param->pout = 256;
	scale4_block0_shortcut_conv2d_param->pin = 128;
	scale4_block0_shortcut_conv2d_param->kern_s[0] = 256;
	scale4_block0_shortcut_conv2d_param->kern_s[1] = 128;
	scale4_block0_shortcut_conv2d_param->kern_s[2] = 3;
	scale4_block0_shortcut_conv2d_param->kern_s[3] = 3;
	scale4_block0_shortcut_conv2d_param->maxog = 34;
	
	// preprocessed weight dim = 315392
	// original weight shape = 256 x 128 x 3 x 3;
	sprintf(filename, "%s/scale4_block0_shortcut_conv2d_weights_array_file", load_data_dir);
	scale4_block0_shortcut_conv2d_param->kernel = (DATA*)neu_DDRmalloc(315392*sizeof(DATA));
	load_fixed(filename,315392,scale4_block0_shortcut_conv2d_param->kernel);
	
	SIZE scale4_block0_shortcut_conv2d_bias_dim = 256;
	scale4_block0_shortcut_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale4_block0_shortcut_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale4_block0_shortcut_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale4_block0_shortcut_conv2d_bias_dim,scale4_block0_shortcut_conv2d_param->bias);
	
	SIZE scale4_block0_shortcut_conv2d_dim = 256 * 14 * 14;
	
	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 256 x 14 x 14
	 * W 256 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	scale4_block0_A_conv2d_param = spatconv_create();
	scale4_block0_A_conv2d_param->pout = 256;
	scale4_block0_A_conv2d_param->pin = 128;
	scale4_block0_A_conv2d_param->kern_s[0] = 256;
	scale4_block0_A_conv2d_param->kern_s[1] = 128;
	scale4_block0_A_conv2d_param->kern_s[2] = 3;
	scale4_block0_A_conv2d_param->kern_s[3] = 3;
	scale4_block0_A_conv2d_param->maxog = 34;
	
	// preprocessed weight dim = 315392
	// original weight shape = 256 x 128 x 3 x 3;
	sprintf(filename, "%s/scale4_block0_A_conv2d_weights_array_file", load_data_dir);
	scale4_block0_A_conv2d_param->kernel = (DATA*)neu_DDRmalloc(315392*sizeof(DATA));
	load_fixed(filename,315392,scale4_block0_A_conv2d_param->kernel);
	
	SIZE scale4_block0_A_conv2d_bias_dim = 256;
	scale4_block0_A_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale4_block0_A_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale4_block0_A_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale4_block0_A_conv2d_bias_dim,scale4_block0_A_conv2d_param->bias);
	
	SIZE scale4_block0_A_conv2d_dim = 256 * 14 * 14;
	
	
	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 256 x 14 x 14
	 * W 256 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale4_block0_B_conv2d_param = spatconv_create();
	scale4_block0_B_conv2d_param->pout = 256;
	scale4_block0_B_conv2d_param->pin = 256;
	scale4_block0_B_conv2d_param->kern_s[0] = 256;
	scale4_block0_B_conv2d_param->kern_s[1] = 256;
	scale4_block0_B_conv2d_param->kern_s[2] = 3;
	scale4_block0_B_conv2d_param->kern_s[3] = 3;
	scale4_block0_B_conv2d_param->maxog = 32;
	
	// preprocessed weight dim = 630784
	// original weight shape = 256 x 256 x 3 x 3;
	sprintf(filename, "%s/scale4_block0_B_conv2d_weights_array_file", load_data_dir);
	scale4_block0_B_conv2d_param->kernel = (DATA*)neu_DDRmalloc(630784*sizeof(DATA));
	load_fixed(filename,630784,scale4_block0_B_conv2d_param->kernel);
	
	SIZE scale4_block0_B_conv2d_bias_dim = 256;
	scale4_block0_B_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale4_block0_B_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale4_block0_B_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale4_block0_B_conv2d_bias_dim,scale4_block0_B_conv2d_param->bias);
	
	SIZE scale4_block0_B_conv2d_dim = 256 * 14 * 14;
	
	
	
	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 256 x 14 x 14
	 * W 256 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale4_block1_A_conv2d_param = spatconv_create();
	scale4_block1_A_conv2d_param->pout = 256;
	scale4_block1_A_conv2d_param->pin = 256;
	scale4_block1_A_conv2d_param->kern_s[0] = 256;
	scale4_block1_A_conv2d_param->kern_s[1] = 256;
	scale4_block1_A_conv2d_param->kern_s[2] = 3;
	scale4_block1_A_conv2d_param->kern_s[3] = 3;
	scale4_block1_A_conv2d_param->maxog = 32;
	
	// preprocessed weight dim = 630784
	// original weight shape = 256 x 256 x 3 x 3;
	sprintf(filename, "%s/scale4_block1_A_conv2d_weights_array_file", load_data_dir);
	scale4_block1_A_conv2d_param->kernel = (DATA*)neu_DDRmalloc(630784*sizeof(DATA));
	load_fixed(filename,630784,scale4_block1_A_conv2d_param->kernel);
	
	SIZE scale4_block1_A_conv2d_bias_dim = 256;
	scale4_block1_A_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale4_block1_A_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale4_block1_A_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale4_block1_A_conv2d_bias_dim,scale4_block1_A_conv2d_param->bias);
	
	SIZE scale4_block1_A_conv2d_dim = 256 * 14 * 14;
	
	
	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 256 x 14 x 14
	 * W 256 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale4_block1_B_conv2d_param = spatconv_create();
	scale4_block1_B_conv2d_param->pout = 256;
	scale4_block1_B_conv2d_param->pin = 256;
	scale4_block1_B_conv2d_param->kern_s[0] = 256;
	scale4_block1_B_conv2d_param->kern_s[1] = 256;
	scale4_block1_B_conv2d_param->kern_s[2] = 3;
	scale4_block1_B_conv2d_param->kern_s[3] = 3;
	scale4_block1_B_conv2d_param->maxog = 32;
	
	// preprocessed weight dim = 630784
	// original weight shape = 256 x 256 x 3 x 3;
	sprintf(filename, "%s/scale4_block1_B_conv2d_weights_array_file", load_data_dir);
	scale4_block1_B_conv2d_param->kernel = (DATA*)neu_DDRmalloc(630784*sizeof(DATA));
	load_fixed(filename,630784,scale4_block1_B_conv2d_param->kernel);
	
	SIZE scale4_block1_B_conv2d_bias_dim = 256;
	scale4_block1_B_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale4_block1_B_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale4_block1_B_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale4_block1_B_conv2d_bias_dim,scale4_block1_B_conv2d_param->bias);
	
	SIZE scale4_block1_B_conv2d_dim = 256 * 14 * 14;
	
	
	
	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 512 x 7 x 7
	 * W 512 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	scale5_block0_shortcut_conv2d_param = spatconv_create();
	scale5_block0_shortcut_conv2d_param->pout = 512;
	scale5_block0_shortcut_conv2d_param->pin = 256;
	scale5_block0_shortcut_conv2d_param->kern_s[0] = 512;
	scale5_block0_shortcut_conv2d_param->kern_s[1] = 256;
	scale5_block0_shortcut_conv2d_param->kern_s[2] = 3;
	scale5_block0_shortcut_conv2d_param->kern_s[3] = 3;
	scale5_block0_shortcut_conv2d_param->maxog = 29;
	
	// preprocessed weight dim = 1261568
	// original weight shape = 512 x 256 x 3 x 3;
	sprintf(filename, "%s/scale5_block0_shortcut_conv2d_weights_array_file", load_data_dir);
	scale5_block0_shortcut_conv2d_param->kernel = (DATA*)neu_DDRmalloc(1261568*sizeof(DATA));
	load_fixed(filename,1261568,scale5_block0_shortcut_conv2d_param->kernel);
	
	SIZE scale5_block0_shortcut_conv2d_bias_dim = 512;
	scale5_block0_shortcut_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale5_block0_shortcut_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale5_block0_shortcut_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale5_block0_shortcut_conv2d_bias_dim,scale5_block0_shortcut_conv2d_param->bias);
	
	SIZE scale5_block0_shortcut_conv2d_dim = 512 * 7 * 7;
	
	
	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 512 x 7 x 7
	 * W 512 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	scale5_block0_A_conv2d_param = spatconv_create();
	scale5_block0_A_conv2d_param->pout = 512;
	scale5_block0_A_conv2d_param->pin = 256;
	scale5_block0_A_conv2d_param->kern_s[0] = 512;
	scale5_block0_A_conv2d_param->kern_s[1] = 256;
	scale5_block0_A_conv2d_param->kern_s[2] = 3;
	scale5_block0_A_conv2d_param->kern_s[3] = 3;
	scale5_block0_A_conv2d_param->maxog = 29;
	
	// preprocessed weight dim = 1261568
	// original weight shape = 512 x 256 x 3 x 3;
	sprintf(filename, "%s/scale5_block0_A_conv2d_weights_array_file", load_data_dir);
	scale5_block0_A_conv2d_param->kernel = (DATA*)neu_DDRmalloc(1261568*sizeof(DATA));
	load_fixed(filename,1261568,scale5_block0_A_conv2d_param->kernel);
	
	SIZE scale5_block0_A_conv2d_bias_dim = 512;
	scale5_block0_A_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale5_block0_A_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale5_block0_A_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale5_block0_A_conv2d_bias_dim,scale5_block0_A_conv2d_param->bias);
	
	SIZE scale5_block0_A_conv2d_dim = 512 * 7 * 7;
	
	
	/*
	 * Convolution layer
	 * IF = 512 x 7 x 7 --> OF = 512 x 7 x 7
	 * W 512 x 512 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale5_block0_B_conv2d_param = spatconv_create();
	scale5_block0_B_conv2d_param->pout = 512;
	scale5_block0_B_conv2d_param->pin = 512;
	scale5_block0_B_conv2d_param->kern_s[0] = 512;
	scale5_block0_B_conv2d_param->kern_s[1] = 512;
	scale5_block0_B_conv2d_param->kern_s[2] = 3;
	scale5_block0_B_conv2d_param->kern_s[3] = 3;
	scale5_block0_B_conv2d_param->maxog = 29;
	
	// preprocessed weight dim = 2465792
	// original weight shape = 512 x 512 x 3 x 3;
	sprintf(filename, "%s/scale5_block0_B_conv2d_weights_array_file", load_data_dir);
	scale5_block0_B_conv2d_param->kernel = (DATA*)neu_DDRmalloc(2465792*sizeof(DATA));
	load_fixed(filename,2465792,scale5_block0_B_conv2d_param->kernel);
	
	SIZE scale5_block0_B_conv2d_bias_dim = 512;
	scale5_block0_B_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale5_block0_B_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale5_block0_B_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale5_block0_B_conv2d_bias_dim,scale5_block0_B_conv2d_param->bias);
	
	SIZE scale5_block0_B_conv2d_dim = 512 * 7 * 7;
	
	
	
	/*
	 * Convolution layer
	 * IF = 512 x 7 x 7 --> OF = 512 x 7 x 7
	 * W 512 x 512 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale5_block1_A_conv2d_param = spatconv_create();
	scale5_block1_A_conv2d_param->pout = 512;
	scale5_block1_A_conv2d_param->pin = 512;
	scale5_block1_A_conv2d_param->kern_s[0] = 512;
	scale5_block1_A_conv2d_param->kern_s[1] = 512;
	scale5_block1_A_conv2d_param->kern_s[2] = 3;
	scale5_block1_A_conv2d_param->kern_s[3] = 3;
	scale5_block1_A_conv2d_param->maxog = 29;
	
	// preprocessed weight dim = 2465792
	// original weight shape = 512 x 512 x 3 x 3;
	sprintf(filename, "%s/scale5_block1_A_conv2d_weights_array_file", load_data_dir);
	scale5_block1_A_conv2d_param->kernel = (DATA*)neu_DDRmalloc(2465792*sizeof(DATA));
	load_fixed(filename,2465792,scale5_block1_A_conv2d_param->kernel);
	
	SIZE scale5_block1_A_conv2d_bias_dim = 512;
	scale5_block1_A_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale5_block1_A_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale5_block1_A_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale5_block1_A_conv2d_bias_dim,scale5_block1_A_conv2d_param->bias);
	
	SIZE scale5_block1_A_conv2d_dim = 512 * 7 * 7;
	
	
	/*
	 * Convolution layer
	 * IF = 512 x 7 x 7 --> OF = 512 x 7 x 7
	 * W 512 x 512 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	scale5_block1_B_conv2d_param = spatconv_create();
	scale5_block1_B_conv2d_param->pout = 512;
	scale5_block1_B_conv2d_param->pin = 512;
	scale5_block1_B_conv2d_param->kern_s[0] = 512;
	scale5_block1_B_conv2d_param->kern_s[1] = 512;
	scale5_block1_B_conv2d_param->kern_s[2] = 3;
	scale5_block1_B_conv2d_param->kern_s[3] = 3;
	scale5_block1_B_conv2d_param->maxog = 29;
	
	// preprocessed weight dim = 2465792
	// original weight shape = 512 x 512 x 3 x 3;
	sprintf(filename, "%s/scale5_block1_B_conv2d_weights_array_file", load_data_dir);
	scale5_block1_B_conv2d_param->kernel = (DATA*)neu_DDRmalloc(2465792*sizeof(DATA));
	load_fixed(filename,2465792,scale5_block1_B_conv2d_param->kernel);
	
	SIZE scale5_block1_B_conv2d_bias_dim = 512;
	scale5_block1_B_conv2d_param->bias = (DATA*)neu_DDRmalloc(scale5_block1_B_conv2d_bias_dim*sizeof(DATA));;
	sprintf(filename, "%s/scale5_block1_B_conv2d_bias_array_file", load_data_dir);
	load_fixed(filename,scale5_block1_B_conv2d_bias_dim,scale5_block1_B_conv2d_param->bias);
	
	SIZE scale5_block1_B_conv2d_dim = 512 * 7 * 7;
	
	
	SIZE avg_pool_dim = 512 * 1 * 1;
	
	
	/*
	 * Fully-connected layer
	 * num outputs = 1000
	 * W 1000 x 512
	 * X 512 x 1
	 */
	SIZE xw_plus_b_MatMul_dim = 1000;
	xw_plus_b_MatMul_param = linear_fp16_create();
	xw_plus_b_MatMul_param->out_s = 1000;
	xw_plus_b_MatMul_param->in_s = avg_pool_dim;
	static DATA xw_plus_b_MatMul_weights_array[512000];
	sprintf(filename, "%s/xw_plus_b_MatMul_weights_array_file", load_data_dir);
	load_fixed(filename,512000,xw_plus_b_MatMul_weights_array);
	xw_plus_b_MatMul_param->weights = xw_plus_b_MatMul_weights_array;
	static DATA xw_plus_b_MatMul_bias_array[1000];
	sprintf(filename, "%s/xw_plus_b_MatMul_bias_array_file", load_data_dir);
	load_fixed(filename,1000,xw_plus_b_MatMul_bias_array);
	xw_plus_b_MatMul_param->bias = xw_plus_b_MatMul_bias_array;
	
	
	
}

void cnnMain(DATA* image, float* results)
{
	double time;
	SIZE batch_join_size[] = { 3, 224, 224 };
	SIZE batch_join_dim = 3 * 224 * 224;
	DATA* batch_join_output = image;

	int job_id = 0;
	int job_id_sc = 0;

	SIZE scale1_conv2d_padding_size[] = { 3, 226, 226 };
	SIZE scale1_conv2d_padding_dim = 3 * 226 * 226;
	static DATA scale1_conv2d_padding_output[scale1_conv2d_padding_dim];
	SIZE scale1_conv2d_padding_pad[] = { 1, 1 };
	
	zero_pad(batch_join_output, soc->in, batch_join_size, scale1_conv2d_padding_pad);
        print_data(scale1_conv2d_padding_output, scale1_conv2d_padding_dim, "./in_2.txt");


	/*
	 * Convolution layer
	 * IF = 3 x 226 x 226 --> OF = 64 x 113 x 113
	 * W 64 x 3 x 7 x 7
	 * Pad    2x2
	 * Stride 2x2
	 */
	
	SIZE scale1_conv2d_merge_size[] = { 64, 112, 112 };
	SIZE scale1_conv2d_merge_stride[] = { 2, 2 };
	SIZE scale1_conv2d_merge_pad[] = { 2, 2 };
	SIZE scale1_conv2d_merge_dim = 64 * 112 * 112;

	SIZE scale1_conv2d_5x5_out[] = { 64, 113, 114 };
	SIZE scale1_conv2d_5x5_out_dim = 64 * 113 * 114;
	SIZE _stride[2] = {1,1};
	int conv_id[4] = {0};

	static DATA scale1_conv2d_5x5_0_tmp[scale1_conv2d_5x5_out_dim];
	static DATA scale1_conv2d_5x5_1_tmp[scale1_conv2d_5x5_out_dim];
	static DATA scale1_conv2d_5x5_2_tmp[scale1_conv2d_5x5_out_dim];
	static DATA scale1_conv2d_5x5_3_tmp[scale1_conv2d_5x5_out_dim];

	static DATA scale1_conv2d_5x5_0_output[scale1_conv2d_5x5_out_dim];
	static DATA scale1_conv2d_5x5_1_output[scale1_conv2d_5x5_out_dim];
	static DATA scale1_conv2d_5x5_2_output[scale1_conv2d_5x5_out_dim];
	static DATA scale1_conv2d_5x5_3_output[scale1_conv2d_5x5_out_dim];

	static DATA scale1_conv2d_merge_output[scale1_conv2d_merge_dim];

  	//SPATCONV scale1_conv2d_7x7as5x5[4] = {
    //	scale1_conv2d_5x5_0_param,
    //	scale1_conv2d_5x5_1_param,
    //	scale1_conv2d_5x5_2_param,
    //	scale1_conv2d_5x5_3_param,
  	//};

	//interlace (soc->in, scale1_conv2d_padding_output, 5, 3, 226, 226);
  	//spatconv_forward_big_hw(scale1_conv2d_7x7as5x5, 5,
    //                      soc->in, scale1_conv2d_merge_output, soc,
    //                      scale1_conv2d_padding_size,
    //                      scale1_conv2d_merge_size,
    //                      scale1_conv2d_merge_stride,
    //                      scale1_conv2d_merge_pad,
    //                      true);

	
	//interlace(soc->in, scale1_conv2d_padding_output, 5, scale1_conv2d_padding_size[0], scale1_conv2d_padding_size[1], scale1_conv2d_padding_size[2]);

	time = get_wall_time();

	conv_id[0] = spatconv_forward_hw(scale1_conv2d_5x5_0_param, soc->in, scale1_conv2d_5x5_0_out, soc, scale1_conv2d_padding_size, scale1_conv2d_5x5_out, scale1_conv2d_merge_stride, scale1_conv2d_merge_pad);
	
        print_data(scale1_conv2d_5x5_0_out, 10000, "./out_2.txt");
exit(0);
	conv_id[1] = spatconv_forward_hw(scale1_conv2d_5x5_1_param, soc->in, scale1_conv2d_5x5_1_out, soc, scale1_conv2d_padding_size, scale1_conv2d_5x5_out, scale1_conv2d_merge_stride, scale1_conv2d_merge_pad);
	conv_id[2] = spatconv_forward_hw(scale1_conv2d_5x5_2_param, soc->in, scale1_conv2d_5x5_2_out, soc, scale1_conv2d_padding_size, scale1_conv2d_5x5_out, scale1_conv2d_merge_stride, scale1_conv2d_merge_pad);
	conv_id[3] = spatconv_forward_hw(scale1_conv2d_5x5_3_param, soc->in, scale1_conv2d_5x5_3_out, soc, scale1_conv2d_padding_size, scale1_conv2d_5x5_out, scale1_conv2d_merge_stride, scale1_conv2d_merge_pad);

    #pragma omp parallel shared(conv_id)
    {
    	#pragma omp single
    	{
	    	#pragma omp task
	    	{
		    	spatconv_wait(soc, conv_id[0]);

	    	    memcpyNEON(scale1_conv2d_5x5_0_tmp, scale1_conv2d_5x5_0_out, scale1_conv2d_5x5_out_dim*sizeof(DATA));
	    	    deinterlace_even(scale1_conv2d_5x5_0_output, scale1_conv2d_5x5_0_tmp, scale1_conv2d_5x5_out[0], scale1_conv2d_5x5_out[1], scale1_conv2d_5x5_out[2], _stride);
	      		//printf("CHECK: %lld \n", checksum(scale1_conv2d_5x5_0_tmp, scale1_conv2d_5x5_out_dim));
	    	}

	    	#pragma omp task
	    	{
	    		spatconv_wait(soc, conv_id[1]);

	    		memcpyNEON(scale1_conv2d_5x5_1_tmp, scale1_conv2d_5x5_1_out, scale1_conv2d_5x5_out_dim*sizeof(DATA));
	    		deinterlace_even(scale1_conv2d_5x5_1_output, scale1_conv2d_5x5_1_tmp, scale1_conv2d_5x5_out[0], scale1_conv2d_5x5_out[1], scale1_conv2d_5x5_out[2], _stride);
	  			//printf("CHECK: %lld \n", checksum(scale1_conv2d_5x5_1_tmp, scale1_conv2d_5x5_out_dim));
			}

			#pragma omp task
			{
	    		spatconv_wait(soc, conv_id[2]);

	    		memcpyNEON(scale1_conv2d_5x5_2_tmp, scale1_conv2d_5x5_2_out, scale1_conv2d_5x5_out_dim*sizeof(DATA));
	    		deinterlace_even(scale1_conv2d_5x5_2_output, scale1_conv2d_5x5_2_tmp, scale1_conv2d_5x5_out[0], scale1_conv2d_5x5_out[1], scale1_conv2d_5x5_out[2], _stride);
	  			//printf("CHECK: %lld \n", checksum(scale1_conv2d_5x5_2_tmp, scale1_conv2d_5x5_out_dim));
			}

			#pragma omp task
			{
	    		spatconv_wait(soc, conv_id[3]);

	    		memcpyNEON(scale1_conv2d_5x5_3_tmp, scale1_conv2d_5x5_3_out, scale1_conv2d_5x5_out_dim*sizeof(DATA));
	    		deinterlace_even(scale1_conv2d_5x5_3_output, scale1_conv2d_5x5_3_tmp, scale1_conv2d_5x5_out[0], scale1_conv2d_5x5_out[1], scale1_conv2d_5x5_out[2], _stride);
	  			//printf("CHECK: %lld \n", checksum(scale1_conv2d_5x5_3_tmp, scale1_conv2d_5x5_out_dim));
			}
		}
	}
	//print_data(scale1_conv2d_5x5_0_output, scale1_conv2d_5x5_0_dim, "./output_neuraghe/resnet/2_scale1_conv2d_5x5_0_output_FIXED");
	//print_data(scale1_conv2d_5x5_1_output, scale1_conv2d_5x5_1_dim, "./output_neuraghe/resnet/3_scale1_conv2d_5x5_1_output_FIXED");
	//print_data(scale1_conv2d_5x5_2_output, scale1_conv2d_5x5_2_dim, "./output_neuraghe/resnet/4_scale1_conv2d_5x5_2_output_FIXED");
	//print_data(scale1_conv2d_5x5_3_output, scale1_conv2d_5x5_3_dim, "./output_neuraghe/resnet/5_scale1_conv2d_5x5_3_output_FIXED");
	
	DATA* scale1_conv2d_merge_inputs[4] = { scale1_conv2d_5x5_0_output, scale1_conv2d_5x5_1_output, scale1_conv2d_5x5_2_output, scale1_conv2d_5x5_3_output };
	spatconv_merge_hw(scale1_conv2d_merge_output, scale1_conv2d_merge_inputs, scale1_conv2d_merge_size, 5, scale1_conv2d_merge_stride, true);
	//print_data(scale1_conv2d_merge_output, scale1_conv2d_merge_dim, "./output_neuraghe/resnet/6_scale1_conv2d_merge_output_FIXED");

	_tprintf_("7x7 Conv time: %5.3f ms\n", (get_wall_time()-time)/1000);

  	// printf("CHECK: %lld \n", checksum(scale1_conv2d_merge_output, scale1_conv2d_merge_dim));

	//DATA* scale1_Relu_output = (DATA *) calloc(scale1_conv2d_merge_dim, sizeof(DATA));
	//relu_forward(scale1_conv2d_merge_output, scale1_Relu_output, scale1_conv2d_merge_size);
	//print_data(scale1_Relu_output, scale1_conv2d_merge_dim, "./output_neuraghe/resnet/7_scale1_Relu_output_FIXED");
	
	//relu_forward(scale1_conv2d_merge_output, scale1_Relu_output, scale1_conv2d_merge_size);
	SIZE scale2_max_pool_size[] = { 64, 56, 56 };
	SIZE scale2_max_pool_dim = 64 * 56 * 56;
	SIZE scale2_max_pool_filter[] = { 3, 3 };
	SIZE scale2_max_pool_stride[] = { 2, 2 };
	SIZE scale2_max_pool_pad[] = { 1, 1 };
	maxpool_fp16_forward(scale1_conv2d_merge_output, scale2_max_pool_output, scale1_conv2d_merge_size, scale2_max_pool_size, scale2_max_pool_filter, scale2_max_pool_stride, scale2_max_pool_pad);
	//printf("CHECK: %lld \n", checksum(scale2_max_pool_output, scale2_max_pool_dim));

	
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 64 x 56 x 56
	 * W 64 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale2_block0_A_conv2d_size[] = { 64, 56, 56 };
	SIZE scale2_block0_A_conv2d_dim = 64 * 56 * 56;
	// scale2_block0_A_conv2d_dim = 200704
	SIZE scale2_block0_A_conv2d_stride[] = { 1, 1 };
	SIZE scale2_block0_A_conv2d_pad[] = { 1, 1 };
	
	interlace(soc->in, scale2_max_pool_output, 3, scale2_max_pool_size[0], scale2_max_pool_size[1], scale2_max_pool_size[2]);

	spatconv_forward_hw(scale2_block0_A_conv2d_param, soc->in, soc->out, soc, scale2_max_pool_size, scale2_block0_A_conv2d_size, scale2_block0_A_conv2d_stride, scale2_block0_A_conv2d_pad, true);
	SIZE scale2_block0_A_conv2d_output_scale2_block0_A_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale2_block0_A_conv2d_output, soc->out, scale2_block0_A_conv2d_size[0], scale2_block0_A_conv2d_size[1], scale2_block0_A_conv2d_size[2], scale2_block0_A_conv2d_output_scale2_block0_A_conv2d_output_dstride);
	
	memcpyNEON(scale2_block0_Shortcut, soc->in, scale2_block0_A_conv2d_dim*sizeof(DATA));
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 64 x 56 x 56
	 * W 64 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale2_block0_B_conv2d_size[] = { 64, 56, 56 };
	SIZE scale2_block0_B_conv2d_dim = 64 * 56 * 56;
	// scale2_block0_B_conv2d_dim = 200704
	SIZE scale2_block0_B_conv2d_stride[] = { 1, 1 };
	SIZE scale2_block0_B_conv2d_pad[] = { 1, 1 };
	
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	soc->out = (DATA*)((uintptr_t)soc->out ^ (uintptr_t)soc->in);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	SIZE scale2_block0_B_conv2d_scale2_max_pool_output_dstride[] = { 1, 1 };
	//deinterlace(scale2_max_pool_output, soc->out, scale2_max_pool_size[0], scale2_max_pool_size[1], scale2_max_pool_size[2], scale2_block0_B_conv2d_scale2_max_pool_output_dstride);
	job_id = spatconv_forward_hw(scale2_block0_B_conv2d_param, soc->in, soc->out, soc, scale2_block0_A_conv2d_size, scale2_block0_B_conv2d_size, scale2_block0_B_conv2d_stride, scale2_block0_B_conv2d_pad);
	SIZE scale2_block0_B_conv2d_output_scale2_block0_B_conv2d_output_dstride[] = { 1, 1 };
	//deinterlace(scale2_block0_B_conv2d_output, soc->out, scale2_block0_B_conv2d_size[0], scale2_block0_B_conv2d_size[1], scale2_block0_B_conv2d_size[2], scale2_block0_B_conv2d_output_scale2_block0_B_conv2d_output_dstride);
	
	spatconv_wait(soc, job_id);

    memcpyNEON(scale2_block0_B_conv2d_output, soc->out, scale2_block0_B_conv2d_dim*sizeof(DATA));
    add_fp16_forward_wR(scale2_block0_Shortcut, scale2_block0_B_conv2d_output, scale2_block0_Residual_Add_Add_output, scale2_max_pool_size);
    //add_fp16_forward_wR(scale2_block0_Shortcut, soc->out, soc->in, scale2_max_pool_size);
    _ddeinterlace_(scale2_block0_Residual_Add_Add_output, soc->in, scale2_block0_B_conv2d_size[0], scale2_block0_B_conv2d_size[1], scale2_block0_B_conv2d_size[2], scale2_block0_B_conv2d_output_scale2_block0_B_conv2d_output_dstride);
    memcpyNEON(soc->in, scale2_block0_Residual_Add_Add_output, scale2_block0_A_conv2d_dim*sizeof(DATA));
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 64 x 56 x 56
	 * W 64 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale2_block1_A_conv2d_size[] = { 64, 56, 56 };
	SIZE scale2_block1_A_conv2d_dim = 64 * 56 * 56;
	// scale2_block1_A_conv2d_dim = 200704
	SIZE scale2_block1_A_conv2d_stride[] = { 1, 1 };
	SIZE scale2_block1_A_conv2d_pad[] = { 1, 1 };
	
	//interlace(soc->in, scale2_block0_Residual_Add_Add_output, 3, scale2_block0_B_conv2d_size[0], scale2_block0_B_conv2d_size[1], scale2_block0_B_conv2d_size[2]);
	
	//time = get_wall_time();
	//memcpyNEON(scale2_block1_Shortcut, soc->in, scale2_block0_B_conv2d_dim*sizeof(DATA));
	//_tprintf_("\tmemcpyNEON: %5.3f ms\n", (get_wall_time()-time)/1000);

	spatconv_forward_hw(scale2_block1_A_conv2d_param, soc->in, soc->out, soc, scale2_block0_B_conv2d_size, scale2_block1_A_conv2d_size, scale2_block1_A_conv2d_stride, scale2_block1_A_conv2d_pad, true);
	SIZE scale2_block1_A_conv2d_output_scale2_block1_A_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale2_block1_A_conv2d_output, soc->out, scale2_block1_A_conv2d_size[0], scale2_block1_A_conv2d_size[1], scale2_block1_A_conv2d_size[2], scale2_block1_A_conv2d_output_scale2_block1_A_conv2d_output_dstride);

	
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 64 x 56 x 56
	 * W 64 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale2_block1_B_conv2d_size[] = { 64, 56, 56 };
	SIZE scale2_block1_B_conv2d_dim = 64 * 56 * 56;
	// scale2_block1_B_conv2d_dim = 200704
	SIZE scale2_block1_B_conv2d_stride[] = { 1, 1 };
	SIZE scale2_block1_B_conv2d_pad[] = { 1, 1 };
	
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	soc->out = (DATA*)((uintptr_t)soc->out ^ (uintptr_t)soc->in);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	SIZE scale2_block1_B_conv2d_scale2_block0_Residual_Add_Add_output_dstride[] = { 1, 1 };
	//deinterlace(scale2_block0_Residual_Add_Add_output, soc->out, scale2_block0_B_conv2d_size[0], scale2_block0_B_conv2d_size[1], scale2_block0_B_conv2d_size[2], scale2_block1_B_conv2d_scale2_block0_Residual_Add_Add_output_dstride);
	job_id = spatconv_forward_hw(scale2_block1_B_conv2d_param, soc->in, soc->out, soc, scale2_block1_A_conv2d_size, scale2_block1_B_conv2d_size, scale2_block1_B_conv2d_stride, scale2_block1_B_conv2d_pad);
	SIZE scale2_block1_B_conv2d_output_scale2_block1_B_conv2d_output_dstride[] = { 1, 1 };
	//deinterlace(scale2_block1_B_conv2d_output, soc->out, scale2_block1_B_conv2d_size[0], scale2_block1_B_conv2d_size[1], scale2_block1_B_conv2d_size[2], scale2_block1_B_conv2d_output_scale2_block1_B_conv2d_output_dstride);
	_ddeinterlace_(scale2_block1_B_conv2d_output, soc->out, scale2_block1_B_conv2d_size[0], scale2_block1_B_conv2d_size[1], scale2_block1_B_conv2d_size[2], scale2_block1_B_conv2d_output_scale2_block1_B_conv2d_output_dstride);

	spatconv_wait(soc, job_id);

	memcpyNEON(scale2_block1_B_conv2d_output, soc->out, scale2_block1_B_conv2d_dim*sizeof(DATA));	
	add_fp16_forward_wR(scale2_block0_Residual_Add_Add_output, scale2_block1_B_conv2d_output, scale2_block1_Residual_Add_Add_output, scale2_block1_B_conv2d_size);
	_ddeinterlace_(scale2_block1_Residual_Add_Add_output, soc->in, scale2_block1_B_conv2d_size[0], scale2_block1_B_conv2d_size[1], scale2_block1_B_conv2d_size[2], scale2_block0_B_conv2d_output_scale2_block0_B_conv2d_output_dstride);
	memcpyNEON(soc->in, scale2_block1_Residual_Add_Add_output, scale2_block0_B_conv2d_dim*sizeof(DATA));
	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 128 x 28 x 28
	 * W 128 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	SIZE scale3_block0_shortcut_conv2d_size[] = { 128, 28, 28 };
	SIZE scale3_block0_shortcut_conv2d_dim = 128 * 28 * 28;
	// scale3_block0_shortcut_conv2d_dim = 100352
	SIZE scale3_block0_shortcut_conv2d_stride[] = { 2, 2 };
	SIZE scale3_block0_shortcut_conv2d_pad[] = { 1, 1 };
	
	//interlace(soc->in, scale2_block1_Residual_Add_Add_output, 3, scale2_block0_B_conv2d_size[0], scale2_block0_B_conv2d_size[1], scale2_block0_B_conv2d_size[2]);
	job_id_sc = spatconv_forward_hw(scale3_block0_shortcut_conv2d_param, soc->in, tmp_out, soc, scale2_block0_B_conv2d_size, scale3_block0_shortcut_conv2d_size, scale3_block0_shortcut_conv2d_stride, scale3_block0_shortcut_conv2d_pad);
	SIZE scale3_block0_shortcut_conv2d_output_scale3_block0_shortcut_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale3_block0_shortcut_conv2d_output, soc->out, scale3_block0_shortcut_conv2d_size[0], scale3_block0_shortcut_conv2d_size[1], scale3_block0_shortcut_conv2d_size[2], scale3_block0_shortcut_conv2d_output_scale3_block0_shortcut_conv2d_output_dstride);

	
	/*
	 * Convolution layer
	 * IF = 64 x 56 x 56 --> OF = 128 x 28 x 28
	 * W 128 x 64 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	SIZE scale3_block0_A_conv2d_size[] = { 128, 28, 28 };
	SIZE scale3_block0_A_conv2d_dim = 128 * 28 * 28;
	// scale3_block0_A_conv2d_dim = 100352
	SIZE scale3_block0_A_conv2d_stride[] = { 2, 2 };
	SIZE scale3_block0_A_conv2d_pad[] = { 1, 1 };
	
	spatconv_forward_hw(scale3_block0_A_conv2d_param, soc->in, soc->out, soc, scale2_block0_B_conv2d_size, scale3_block0_A_conv2d_size, scale3_block0_A_conv2d_stride, scale3_block0_A_conv2d_pad, true);
	SIZE scale3_block0_A_conv2d_output_scale3_block0_A_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale3_block0_A_conv2d_output, soc->out, scale3_block0_A_conv2d_size[0], scale3_block0_A_conv2d_size[1], scale3_block0_A_conv2d_size[2], scale3_block0_A_conv2d_output_scale3_block0_A_conv2d_output_dstride);

	
	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 128 x 28 x 28
	 * W 128 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale3_block0_B_conv2d_size[] = { 128, 28, 28 };
	SIZE scale3_block0_B_conv2d_dim = 128 * 28 * 28;
	// scale3_block0_B_conv2d_dim = 100352
	SIZE scale3_block0_B_conv2d_stride[] = { 1, 1 };
	SIZE scale3_block0_B_conv2d_pad[] = { 1, 1 };
	
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	soc->out = (DATA*)((uintptr_t)soc->out ^ (uintptr_t)soc->in);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	job_id = spatconv_forward_hw(scale3_block0_B_conv2d_param, soc->in, soc->out, soc, scale3_block0_A_conv2d_size, scale3_block0_B_conv2d_size, scale3_block0_B_conv2d_stride, scale3_block0_B_conv2d_pad);
	SIZE scale3_block0_B_conv2d_output_scale3_block0_B_conv2d_output_dstride[] = { 1, 1 };
	//deinterlace(scale3_block0_B_conv2d_output, soc->out, scale3_block0_B_conv2d_size[0], scale3_block0_B_conv2d_size[1], scale3_block0_B_conv2d_size[2], scale3_block0_B_conv2d_output_scale3_block0_B_conv2d_output_dstride);
	_ddeinterlace_(scale3_block0_B_conv2d_output, soc->out, scale3_block0_B_conv2d_size[0], scale3_block0_B_conv2d_size[1], scale3_block0_B_conv2d_size[2], scale3_block0_B_conv2d_output_scale3_block0_B_conv2d_output_dstride);

	spatconv_wait(soc, job_id_sc);

	memcpyNEON(scale3_block0_Shortcut, tmp_out, scale3_block0_shortcut_conv2d_dim*sizeof(DATA));

	spatconv_wait(soc, job_id);

	memcpyNEON(scale3_block0_B_conv2d_output, soc->out, scale3_block0_B_conv2d_dim*sizeof(DATA));
	add_fp16_forward_wR(scale3_block0_Shortcut, scale3_block0_B_conv2d_output, scale3_block0_Residual_Add_Add_output, scale3_block0_B_conv2d_size);
	_ddeinterlace_(scale3_block0_Residual_Add_Add_output, soc->in, scale3_block0_B_conv2d_size[0], scale3_block0_B_conv2d_size[1], scale3_block0_B_conv2d_size[2], scale3_block0_B_conv2d_output_scale3_block0_B_conv2d_output_dstride);
	memcpyNEON(soc->in, scale3_block0_Residual_Add_Add_output, scale3_block0_B_conv2d_dim*sizeof(DATA));

	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 128 x 28 x 28
	 * W 128 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale3_block1_A_conv2d_size[] = { 128, 28, 28 };
	SIZE scale3_block1_A_conv2d_dim = 128 * 28 * 28;
	// scale3_block1_A_conv2d_dim = 100352
	SIZE scale3_block1_A_conv2d_stride[] = { 1, 1 };
	SIZE scale3_block1_A_conv2d_pad[] = { 1, 1 };
	
	//interlace(soc->in, scale3_block0_Residual_Add_Add_output, 3, scale3_block0_B_conv2d_size[0], scale3_block0_B_conv2d_size[1], scale3_block0_B_conv2d_size[2]);

	//time = get_wall_time();
	//memcpyNEON(scale3_block1_Shortcut, soc->in, scale3_block0_shortcut_conv2d_dim*sizeof(DATA));
	//_tprintf_("\tmemcpyNEON: %5.3f ms\n", (get_wall_time()-time)/1000);

	spatconv_forward_hw(scale3_block1_A_conv2d_param, soc->in, soc->out, soc, scale3_block0_B_conv2d_size, scale3_block1_A_conv2d_size, scale3_block1_A_conv2d_stride, scale3_block1_A_conv2d_pad, true);
	SIZE scale3_block1_A_conv2d_output_scale3_block1_A_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale3_block1_A_conv2d_output, soc->out, scale3_block1_A_conv2d_size[0], scale3_block1_A_conv2d_size[1], scale3_block1_A_conv2d_size[2], scale3_block1_A_conv2d_output_scale3_block1_A_conv2d_output_dstride);

	
	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 128 x 28 x 28
	 * W 128 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale3_block1_B_conv2d_size[] = { 128, 28, 28 };
	SIZE scale3_block1_B_conv2d_dim = 128 * 28 * 28;
	// scale3_block1_B_conv2d_dim = 100352
	SIZE scale3_block1_B_conv2d_stride[] = { 1, 1 };
	SIZE scale3_block1_B_conv2d_pad[] = { 1, 1 };
	
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	soc->out = (DATA*)((uintptr_t)soc->out ^ (uintptr_t)soc->in);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	SIZE scale3_block1_B_conv2d_scale3_block0_Residual_Add_Add_output_dstride[] = { 1, 1 };
	//deinterlace(scale3_block0_Residual_Add_Add_output, soc->out, scale3_block0_B_conv2d_size[0], scale3_block0_B_conv2d_size[1], scale3_block0_B_conv2d_size[2], scale3_block1_B_conv2d_scale3_block0_Residual_Add_Add_output_dstride);
	job_id = spatconv_forward_hw(scale3_block1_B_conv2d_param, soc->in, soc->out, soc, scale3_block1_A_conv2d_size, scale3_block1_B_conv2d_size, scale3_block1_B_conv2d_stride, scale3_block1_B_conv2d_pad);
	SIZE scale3_block1_B_conv2d_output_scale3_block1_B_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale3_block1_B_conv2d_output, soc->out, scale3_block1_B_conv2d_size[0], scale3_block1_B_conv2d_size[1], scale3_block1_B_conv2d_size[2], scale3_block1_B_conv2d_output_scale3_block1_B_conv2d_output_dstride);

	spatconv_wait(soc, job_id);


	memcpyNEON(scale3_block1_B_conv2d_output, soc->out, scale3_block1_B_conv2d_dim*sizeof(DATA));	
	add_fp16_forward_wR(scale3_block0_Residual_Add_Add_output, scale3_block1_B_conv2d_output, scale3_block1_Residual_Add_Add_output, scale3_block1_B_conv2d_size);
	_ddeinterlace_(scale3_block1_Residual_Add_Add_output, soc->in, scale3_block1_B_conv2d_size[0], scale3_block1_B_conv2d_size[1], scale3_block1_B_conv2d_size[2], scale3_block1_B_conv2d_output_scale3_block1_B_conv2d_output_dstride);
	memcpyNEON(soc->in, scale3_block1_Residual_Add_Add_output, scale3_block1_B_conv2d_dim*sizeof(DATA));

	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 256 x 14 x 14
	 * W 256 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	SIZE scale4_block0_shortcut_conv2d_size[] = { 256, 14, 14 };
	SIZE scale4_block0_shortcut_conv2d_dim = 256 * 14 * 14;
	// scale4_block0_shortcut_conv2d_dim = 50176
	static DATA scale4_block0_shortcut_conv2d_output[50176];
	SIZE scale4_block0_shortcut_conv2d_stride[] = { 2, 2 };
	SIZE scale4_block0_shortcut_conv2d_pad[] = { 1, 1 };
	
	//interlace(soc->in, scale3_block1_Residual_Add_Add_output, 3, scale3_block0_B_conv2d_size[0], scale3_block0_B_conv2d_size[1], scale3_block0_B_conv2d_size[2]);
	job_id_sc = spatconv_forward_hw(scale4_block0_shortcut_conv2d_param, soc->in, tmp_out, soc, scale3_block0_B_conv2d_size, scale4_block0_shortcut_conv2d_size, scale4_block0_shortcut_conv2d_stride, scale4_block0_shortcut_conv2d_pad);
	SIZE scale4_block0_shortcut_conv2d_output_scale4_block0_shortcut_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale4_block0_shortcut_conv2d_output, soc->out, scale4_block0_shortcut_conv2d_size[0], scale4_block0_shortcut_conv2d_size[1], scale4_block0_shortcut_conv2d_size[2], scale4_block0_shortcut_conv2d_output_scale4_block0_shortcut_conv2d_output_dstride);

	
	/*
	 * Convolution layer
	 * IF = 128 x 28 x 28 --> OF = 256 x 14 x 14
	 * W 256 x 128 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	SIZE scale4_block0_A_conv2d_size[] = { 256, 14, 14 };
	SIZE scale4_block0_A_conv2d_dim = 256 * 14 * 14;
	// scale4_block0_A_conv2d_dim = 50176
	SIZE scale4_block0_A_conv2d_stride[] = { 2, 2 };
	SIZE scale4_block0_A_conv2d_pad[] = { 1, 1 };
	
	spatconv_forward_hw(scale4_block0_A_conv2d_param, soc->in, soc->out, soc, scale3_block0_B_conv2d_size, scale4_block0_A_conv2d_size, scale4_block0_A_conv2d_stride, scale4_block0_A_conv2d_pad, true);
	SIZE scale4_block0_A_conv2d_output_scale4_block0_A_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale4_block0_A_conv2d_output, soc->out, scale4_block0_A_conv2d_size[0], scale4_block0_A_conv2d_size[1], scale4_block0_A_conv2d_size[2], scale4_block0_A_conv2d_output_scale4_block0_A_conv2d_output_dstride);

	
	
	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 256 x 14 x 14
	 * W 256 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale4_block0_B_conv2d_size[] = { 256, 14, 14 };
	SIZE scale4_block0_B_conv2d_dim = 256 * 14 * 14;
	// scale4_block0_B_conv2d_dim = 50176
	SIZE scale4_block0_B_conv2d_stride[] = { 1, 1 };
	SIZE scale4_block0_B_conv2d_pad[] = { 1, 1 };
	
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	soc->out = (DATA*)((uintptr_t)soc->out ^ (uintptr_t)soc->in);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	job_id = spatconv_forward_hw(scale4_block0_B_conv2d_param, soc->in, soc->out, soc, scale4_block0_A_conv2d_size, scale4_block0_B_conv2d_size, scale4_block0_B_conv2d_stride, scale4_block0_B_conv2d_pad);
	SIZE scale4_block0_B_conv2d_output_scale4_block0_B_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale4_block0_B_conv2d_output, soc->out, scale4_block0_B_conv2d_size[0], scale4_block0_B_conv2d_size[1], scale4_block0_B_conv2d_size[2], scale4_block0_B_conv2d_output_scale4_block0_B_conv2d_output_dstride);

	spatconv_wait(soc, job_id_sc);

	memcpyNEON(scale4_block0_Shortcut, tmp_out, scale4_block0_shortcut_conv2d_dim*sizeof(DATA));

	spatconv_wait(soc, job_id);

	memcpyNEON(scale4_block0_B_conv2d_output, soc->out, scale4_block0_B_conv2d_dim*sizeof(DATA));
	add_fp16_forward_wR(scale4_block0_Shortcut, scale4_block0_B_conv2d_output, scale4_block0_Residual_Add_Add_output, scale4_block0_shortcut_conv2d_size);
	_ddeinterlace_(scale4_block0_Residual_Add_Add_output, soc->out, scale4_block0_B_conv2d_size[0], scale4_block0_B_conv2d_size[1], scale4_block0_B_conv2d_size[2], scale4_block0_B_conv2d_output_scale4_block0_B_conv2d_output_dstride);
	memcpyNEON(soc->in, scale4_block0_Residual_Add_Add_output, scale4_block0_B_conv2d_dim*sizeof(DATA));

	
	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 256 x 14 x 14
	 * W 256 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale4_block1_A_conv2d_size[] = { 256, 14, 14 };
	SIZE scale4_block1_A_conv2d_dim = 256 * 14 * 14;
	// scale4_block1_A_conv2d_dim = 50176
	SIZE scale4_block1_A_conv2d_stride[] = { 1, 1 };
	SIZE scale4_block1_A_conv2d_pad[] = { 1, 1 };

	//interlace(soc->in, scale4_block0_Residual_Add_Add_output, 3, scale4_block0_B_conv2d_size[0], scale4_block0_B_conv2d_size[1], scale4_block0_B_conv2d_size[2]);

	//memcpyNEON(scale4_block1_Shortcut, soc->in, scale4_block0_shortcut_conv2d_dim*sizeof(DATA));

	spatconv_forward_hw(scale4_block1_A_conv2d_param, soc->in, soc->out, soc, scale4_block0_B_conv2d_size, scale4_block1_A_conv2d_size, scale4_block1_A_conv2d_stride, scale4_block1_A_conv2d_pad, true);
	SIZE scale4_block1_A_conv2d_output_scale4_block1_A_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale4_block1_A_conv2d_output, soc->out, scale4_block1_A_conv2d_size[0], scale4_block1_A_conv2d_size[1], scale4_block1_A_conv2d_size[2], scale4_block1_A_conv2d_output_scale4_block1_A_conv2d_output_dstride);
	
	
	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 256 x 14 x 14
	 * W 256 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale4_block1_B_conv2d_size[] = { 256, 14, 14 };
	SIZE scale4_block1_B_conv2d_dim = 256 * 14 * 14;
	// scale4_block1_B_conv2d_dim = 50176
	SIZE scale4_block1_B_conv2d_stride[] = { 1, 1 };
	SIZE scale4_block1_B_conv2d_pad[] = { 1, 1 };
	
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	soc->out = (DATA*)((uintptr_t)soc->out ^ (uintptr_t)soc->in);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	SIZE scale4_block1_B_conv2d_scale4_block0_Residual_Add_Add_output_dstride[] = { 1, 1 };
	//deinterlace(scale4_block0_Residual_Add_Add_output, soc->out, scale4_block0_B_conv2d_size[0], scale4_block0_B_conv2d_size[1], scale4_block0_B_conv2d_size[2], scale4_block1_B_conv2d_scale4_block0_Residual_Add_Add_output_dstride);
	job_id = spatconv_forward_hw(scale4_block1_B_conv2d_param, soc->in, soc->out, soc, scale4_block1_A_conv2d_size, scale4_block1_B_conv2d_size, scale4_block1_B_conv2d_stride, scale4_block1_B_conv2d_pad);
	SIZE scale4_block1_B_conv2d_output_scale4_block1_B_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale4_block1_B_conv2d_output, soc->out, scale4_block1_B_conv2d_size[0], scale4_block1_B_conv2d_size[1], scale4_block1_B_conv2d_size[2], scale4_block1_B_conv2d_output_scale4_block1_B_conv2d_output_dstride);

	spatconv_wait(soc, job_id);

    memcpyNEON(scale4_block1_B_conv2d_output, soc->out, scale4_block1_B_conv2d_dim*sizeof(DATA));
    add_fp16_forward_wR(scale4_block0_Residual_Add_Add_output, scale4_block1_B_conv2d_output, scale4_block1_Residual_Add_Add_output, scale4_block1_B_conv2d_size);
    _ddeinterlace_(scale4_block1_Residual_Add_Add_output, soc->in, scale4_block1_B_conv2d_size[0], scale4_block1_B_conv2d_size[1], scale4_block1_B_conv2d_size[2], scale4_block1_B_conv2d_output_scale4_block1_B_conv2d_output_dstride);
    memcpyNEON(soc->in, scale4_block1_Residual_Add_Add_output, scale4_block1_B_conv2d_dim*sizeof(DATA));

	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 512 x 7 x 7
	 * W 512 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	SIZE scale5_block0_shortcut_conv2d_size[] = { 512, 7, 7 };
	SIZE scale5_block0_shortcut_conv2d_dim = 512 * 7 * 7;
	SIZE scale5_block0_shortcut_hw = 512 * 8 * 7;
	// scale5_block0_shortcut_conv2d_dim = 25088
	SIZE scale5_block0_shortcut_conv2d_stride[] = { 2, 2 };
	SIZE scale5_block0_shortcut_conv2d_pad[] = { 1, 1 };
	
	//interlace(soc->in, scale4_block1_Residual_Add_Add_output, 3, scale4_block0_B_conv2d_size[0], scale4_block0_B_conv2d_size[1], scale4_block0_B_conv2d_size[2]);
	job_id_sc = spatconv_forward_hw(scale5_block0_shortcut_conv2d_param, soc->in, tmp_out, soc, scale4_block0_B_conv2d_size, scale5_block0_shortcut_conv2d_size, scale5_block0_shortcut_conv2d_stride, scale5_block0_shortcut_conv2d_pad);
	SIZE scale5_block0_shortcut_conv2d_output_scale5_block0_shortcut_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale5_block0_shortcut_conv2d_output, soc->out, scale5_block0_shortcut_conv2d_size[0], scale5_block0_shortcut_conv2d_size[1], scale5_block0_shortcut_conv2d_size[2], scale5_block0_shortcut_conv2d_output_scale5_block0_shortcut_conv2d_output_dstride);
	

	/*
	 * Convolution layer
	 * IF = 256 x 14 x 14 --> OF = 512 x 7 x 7
	 * W 512 x 256 x 3 x 3
	 * Pad    1x1
	 * Stride 2x2
	 */
	SIZE scale5_block0_A_conv2d_size[] = { 512, 7, 7 };
	SIZE scale5_block0_A_conv2d_dim = 512 * 7 * 7;
	// scale5_block0_A_conv2d_dim = 25088
	SIZE scale5_block0_A_conv2d_stride[] = { 2, 2 };
	SIZE scale5_block0_A_conv2d_pad[] = { 1, 1 };

	spatconv_forward_hw(scale5_block0_A_conv2d_param, soc->in, soc->out, soc, scale4_block0_B_conv2d_size, scale5_block0_A_conv2d_size, scale5_block0_A_conv2d_stride, scale5_block0_A_conv2d_pad, true);
	SIZE scale5_block0_A_conv2d_output_scale5_block0_A_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale5_block0_A_conv2d_output, soc->out, scale5_block0_A_conv2d_size[0], scale5_block0_A_conv2d_size[1], scale5_block0_A_conv2d_size[2], scale5_block0_A_conv2d_output_scale5_block0_A_conv2d_output_dstride);

	
	/*
	 * Convolution layer
	 * IF = 512 x 7 x 7 --> OF = 512 x 7 x 7
	 * W 512 x 512 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale5_block0_B_conv2d_size[] = { 512, 7, 7 };
	SIZE scale5_add_size[] = { 512, 8, 7 };
	SIZE scale5_block0_B_conv2d_dim = 512 * 7 * 7;
	// scale5_block0_B_conv2d_dim = 25088
	SIZE scale5_block0_B_conv2d_stride[] = { 1, 1 };
	SIZE scale5_block0_B_conv2d_pad[] = { 1, 1 };

	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	soc->out = (DATA*)((uintptr_t)soc->out ^ (uintptr_t)soc->in);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);	
	//interlace(soc->in, scale5_block0_A_conv2d_output, 3, scale5_block0_B_conv2d_size[0], scale5_block0_B_conv2d_size[1], scale5_block0_B_conv2d_size[2]);
	job_id = spatconv_forward_hw(scale5_block0_B_conv2d_param, soc->in, soc->out, soc, scale5_block0_A_conv2d_size, scale5_block0_B_conv2d_size, scale5_block0_B_conv2d_stride, scale5_block0_B_conv2d_pad);
	SIZE scale5_block0_B_conv2d_output_scale5_block0_B_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale5_block0_B_conv2d_output, soc->out, scale5_block0_B_conv2d_size[0], scale5_block0_B_conv2d_size[1], scale5_block0_B_conv2d_size[2], scale5_block0_B_conv2d_output_scale5_block0_B_conv2d_output_dstride);

	spatconv_wait(soc, job_id_sc);

	memcpyNEON(scale5_block0_Shortcut, tmp_out, scale5_block0_shortcut_hw*sizeof(DATA));

	spatconv_wait(soc, job_id);

	memcpyNEON(scale5_block0_B_conv2d_output_hw, soc->out, scale5_block0_shortcut_hw*sizeof(DATA));
	add_fp16_forward_wR(scale5_block0_Shortcut, scale5_block0_B_conv2d_output_hw, scale5_block0_Residual_Add_Add_output_hw, scale5_add_size);
	_ddeinterlace_(scale5_block0_Residual_Add_Add_output, soc->in, scale5_block0_B_conv2d_size[0], scale5_block0_B_conv2d_size[1], scale5_block0_B_conv2d_size[2], scale5_block0_B_conv2d_output_scale5_block0_B_conv2d_output_dstride);
	
	place_zeros((uint32_t*)scale5_block0_Residual_Add_Add_output_hw, scale5_add_size);
	memcpyNEON(soc->in, scale5_block0_Residual_Add_Add_output_hw, scale5_block0_shortcut_hw*sizeof(DATA));
	
	
	/*
	 * Convolution layer
	 * IF = 512 x 7 x 7 --> OF = 512 x 7 x 7
	 * W 512 x 512 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale5_block1_A_conv2d_size[] = { 512, 7, 7 };
	SIZE scale5_block1_A_conv2d_dim = 512 * 7 * 7;
	SIZE scale5_block1_A_conv2d_dim_hw = 512 * 8 * 7;
	// scale5_block1_A_conv2d_dim = 25088
	SIZE scale5_block1_A_conv2d_stride[] = { 1, 1 };
	SIZE scale5_block1_A_conv2d_pad[] = { 1, 1 };
	
	//interlace(soc->in, scale5_block0_Residual_Add_Add_output, 3, scale5_block0_B_conv2d_size[0], scale5_block0_B_conv2d_size[1], scale5_block0_B_conv2d_size[2]);
	job_id = spatconv_forward_hw(scale5_block1_A_conv2d_param, soc->in, soc->out, soc, scale5_block0_B_conv2d_size, scale5_block1_A_conv2d_size, scale5_block1_A_conv2d_stride, scale5_block1_A_conv2d_pad, true);
	SIZE scale5_block1_A_conv2d_output_scale5_block1_A_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale5_block1_A_conv2d_output, soc->out, scale5_block1_A_conv2d_size[0], scale5_block1_A_conv2d_size[1], scale5_block1_A_conv2d_size[2], scale5_block1_A_conv2d_output_scale5_block1_A_conv2d_output_dstride);

	spatconv_wait(soc, job_id);

	place_zeros((uint32_t*)soc->out, scale5_add_size);

	//time = get_wall_time();
	//memcpyNEON(scale5_block1_Shortcut, soc->in, scale5_block1_A_conv2d_dim_hw*sizeof(DATA));
	//_tprintf_("\tmemcpyNEON: %5.3f ms\n", (get_wall_time()-time)/1000);
	
	/*
	 * Convolution layer
	 * IF = 512 x 7 x 7 --> OF = 512 x 7 x 7
	 * W 512 x 512 x 3 x 3
	 * Pad    1x1
	 * Stride 1x1
	 */
	SIZE scale5_block1_B_conv2d_size[] = { 512, 7, 7 };
	SIZE scale5_block1_B_conv2d_dim = 512 * 7 * 7;
	// scale5_block1_B_conv2d_dim = 25088
	SIZE scale5_block1_B_conv2d_stride[] = { 1, 1 };
	SIZE scale5_block1_B_conv2d_pad[] = { 1, 1 };
	
	SIZE scale5_block1_B_conv2d_scale5_block0_Residual_Add_Add_output_dstride[] = { 1, 1 };
	//deinterlace(scale5_block0_Residual_Add_Add_output, soc->in, scale5_block0_B_conv2d_size[0], scale5_block0_B_conv2d_size[1], scale5_block0_B_conv2d_size[2], scale5_block1_B_conv2d_scale5_block0_Residual_Add_Add_output_dstride);

	//interlace(soc->in, scale5_block1_A_conv2d_output, 3, scale5_block0_B_conv2d_size[0], scale5_block0_B_conv2d_size[1], scale5_block0_B_conv2d_size[2]);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	soc->out = (DATA*)((uintptr_t)soc->out ^ (uintptr_t)soc->in);
	soc->in = (DATA*)((uintptr_t)soc->in ^ (uintptr_t)soc->out);
	job_id = spatconv_forward_hw(scale5_block1_B_conv2d_param, soc->in, soc->out, soc, scale5_block1_A_conv2d_size, scale5_block1_B_conv2d_size, scale5_block1_B_conv2d_stride, scale5_block1_B_conv2d_pad);
	SIZE scale5_block1_B_conv2d_output_scale5_block1_B_conv2d_output_dstride[] = { 1, 1 };
	_ddeinterlace_(scale5_block1_B_conv2d_output, soc->out, scale5_block1_B_conv2d_size[0], scale5_block1_B_conv2d_size[1], scale5_block1_B_conv2d_size[2], scale5_block1_B_conv2d_output_scale5_block1_B_conv2d_output_dstride);

	spatconv_wait(soc, job_id);
	//printf("CHECK: %lld \n", checksum(soc->out, scale5_block1_B_conv2d_dim));
	
    memcpyNEON(scale5_block1_B_conv2d_output_hw, soc->out, scale5_block1_A_conv2d_dim_hw*sizeof(DATA));
    add_fp16_forward_wR(scale5_block0_Residual_Add_Add_output_hw, scale5_block1_B_conv2d_output_hw, scale5_block1_Residual_Add_Add_output_tmp, scale5_add_size);
    deinterlace(scale5_block1_Residual_Add_Add_output, scale5_block1_Residual_Add_Add_output_tmp, scale5_block1_B_conv2d_size[0], scale5_block1_B_conv2d_size[1], scale5_block1_B_conv2d_size[2], scale5_block1_B_conv2d_output_scale5_block1_B_conv2d_output_dstride);

	

	SIZE avg_pool_size[] = { 512, 1, 1 };
	SIZE avg_pool_dim = 512 * 1 * 1;
	SIZE avg_pool_filter[] = { 7, 7 };
	SIZE avg_pool_stride[] = { 1, 1 };
	SIZE avg_pool_pad[] = { 0, 0 };
	avgpool_forward(scale5_block1_Residual_Add_Add_output, avg_pool_output, scale5_block0_B_conv2d_size, avg_pool_size, avg_pool_filter, avg_pool_stride, avg_pool_pad);

	_tprintf_("CHECKSUM: %lld \n", checksum(avg_pool_output, avg_pool_dim));
	
	/*
	 * Fully-connected layer
	 * num outputs = 1000
	 * W 1000 x 512
	 * X 512 x 1
	 */
	SIZE xw_plus_b_MatMul_size[] = { 1000, 1, 1 };
	SIZE xw_plus_b_MatMul_dim = 1000;
	static DATA xw_plus_b_MatMul_output[xw_plus_b_MatMul_dim];
	linear_fp16_forward(xw_plus_b_MatMul_param, avg_pool_output, xw_plus_b_MatMul_output, avg_pool_dim, xw_plus_b_MatMul_dim);

	// Convert output
	for(unsigned int i = 0; i < xw_plus_b_MatMul_dim; i++)
		results[i] = (float) FIXED2FLOAT(xw_plus_b_MatMul_output[i]);

 	_dprint_data_(batch_join_output, batch_join_dim, "./output_neuraghe/resnet/0_batch_join_output_FIXED");
 	_dprint_data_(scale1_conv2d_padding_output, scale1_conv2d_padding_dim, "./output_neuraghe/resnet/1_scale1_conv2d_padding_output_FIXED");
 	_dprint_data_(scale1_conv2d_merge_output, scale1_conv2d_merge_dim, "./output_neuraghe/resnet/11_scale1_conv2d_merge_output_FIXED");
 	_dprint_data_(scale1_Relu_output, scale1_conv2d_merge_dim, "./output_neuraghe/resnet/12_scale1_Relu_output_FIXED");
 	_dprint_data_(scale2_max_pool_output, scale2_max_pool_dim, "./output_neuraghe/resnet/13_scale2_max_pool_output_FIXED");
 	_dprint_data_(scale2_block0_A_conv2d_output, scale2_block0_A_conv2d_dim, "./output_neuraghe/resnet/14_scale2_block0_A_conv2d_output_FIXED");
 	_dprint_data_(scale2_block0_B_conv2d_output, scale2_block0_B_conv2d_dim, "./output_neuraghe/resnet/15_scale2_block0_B_conv2d_output_FIXED");
 	_dprint_data_(scale2_block0_Residual_Add_Add_output, scale2_max_pool_dim, "./output_neuraghe/resnet/16_scale2_block0_Residual_Add_Add_output_FIXED");
 	_dprint_data_(scale2_block1_A_conv2d_output, scale2_block1_A_conv2d_dim, "./output_neuraghe/resnet/17_scale2_block1_A_conv2d_output_FIXED");
 	_dprint_data_(scale2_block1_B_conv2d_output, scale2_block1_B_conv2d_dim, "./output_neuraghe/resnet/18_scale2_block1_B_conv2d_output_FIXED");
 	_dprint_data_(scale2_block1_Residual_Add_Add_output, scale2_block1_B_conv2d_dim, "./output_neuraghe/resnet/19_scale2_block1_Residual_Add_Add_output_FIXED");
 	_dprint_data_(scale3_block0_shortcut_conv2d_output, scale3_block0_shortcut_conv2d_dim, "./output_neuraghe/resnet/20_scale3_block0_shortcut_conv2d_output_FIXED");
 	_dprint_data_(scale3_block0_A_conv2d_output, scale3_block0_A_conv2d_dim, "./output_neuraghe/resnet/21_scale3_block0_A_conv2d_output_FIXED");
 	_dprint_data_(scale3_block0_B_conv2d_output, scale3_block0_B_conv2d_dim, "./output_neuraghe/resnet/22_scale3_block0_B_conv2d_output_FIXED");
 	_dprint_data_(scale3_block0_Residual_Add_Add_output, scale3_block0_shortcut_conv2d_dim, "./output_neuraghe/resnet/23_scale3_block0_Residual_Add_Add_output_FIXED");
 	_dprint_data_(scale3_block1_A_conv2d_output, scale3_block1_A_conv2d_dim, "./output_neuraghe/resnet/24_scale3_block1_A_conv2d_output_FIXED");
 	_dprint_data_(scale3_block1_B_conv2d_output, scale3_block1_B_conv2d_dim, "./output_neuraghe/resnet/25_scale3_block1_B_conv2d_output_FIXED");
 	_dprint_data_(scale3_block1_Residual_Add_Add_output, scale3_block1_B_conv2d_dim, "./output_neuraghe/resnet/26_scale3_block1_Residual_Add_Add_output_FIXED");
 	_dprint_data_(scale4_block0_shortcut_conv2d_output, scale4_block0_shortcut_conv2d_dim, "./output_neuraghe/resnet/27_scale4_block0_shortcut_conv2d_output_FIXED");
 	_dprint_data_(scale4_block0_A_conv2d_output, scale4_block0_A_conv2d_dim, "./output_neuraghe/resnet/28_scale4_block0_A_conv2d_output_FIXED");
 	_dprint_data_(scale4_block0_B_conv2d_output, scale4_block0_B_conv2d_dim, "./output_neuraghe/resnet/29_scale4_block0_B_conv2d_output_FIXED");
 	_dprint_data_(scale4_block0_Residual_Add_Add_output, scale4_block0_shortcut_conv2d_dim, "./output_neuraghe/resnet/30_scale4_block0_Residual_Add_Add_output_FIXED");
 	_dprint_data_(scale4_block1_A_conv2d_output, scale4_block1_A_conv2d_dim, "./output_neuraghe/resnet/31_scale4_block1_A_conv2d_output_FIXED");
 	_dprint_data_(scale4_block1_B_conv2d_output, scale4_block1_B_conv2d_dim, "./output_neuraghe/resnet/32_scale4_block1_B_conv2d_output_FIXED");
 	_dprint_data_(scale4_block1_Residual_Add_Add_output, scale4_block1_B_conv2d_dim, "./output_neuraghe/resnet/33_scale4_block1_Residual_Add_Add_output_FIXED");
 	_dprint_data_(scale5_block0_shortcut_conv2d_output, scale5_block0_shortcut_conv2d_dim, "./output_neuraghe/resnet/34_scale5_block0_shortcut_conv2d_output_FIXED");
 	_dprint_data_(scale5_block0_A_conv2d_output, scale5_block0_A_conv2d_dim, "./output_neuraghe/resnet/35_scale5_block0_A_conv2d_output_FIXED");
 	_dprint_data_(scale5_block0_B_conv2d_output, scale5_block0_B_conv2d_dim, "./output_neuraghe/resnet/36_scale5_block0_B_conv2d_output_FIXED");
 	_dprint_data_(scale5_block0_Residual_Add_Add_output, scale5_block0_shortcut_conv2d_dim, "./output_neuraghe/resnet/37_scale5_block0_Residual_Add_Add_output_FIXED");
 	_dprint_data_(scale5_block1_A_conv2d_output, scale5_block1_A_conv2d_dim, "./output_neuraghe/resnet/38_scale5_block1_A_conv2d_output_FIXED");
 	_dprint_data_(scale5_block1_B_conv2d_output, scale5_block1_B_conv2d_dim, "./output_neuraghe/resnet/39_scale5_block1_B_conv2d_output_FIXED");
 	_dprint_data_(scale5_block1_Residual_Add_Add_output, scale5_block1_B_conv2d_dim, "./output_neuraghe/resnet/40_scale5_block1_Residual_Add_Add_output_FIXED");
 	_dprint_data_(avg_pool_output, avg_pool_dim, "./output_neuraghe/resnet/41_avg_pool_output_FIXED");
 	_dprint_data_(xw_plus_b_MatMul_output, xw_plus_b_MatMul_dim, "./output_neuraghe/resnet/42_xw_plus_b_MatMul_output_FIXED");
	
}

void free_platform(){
	munmap_soc(soc);
	free(soc);
}

