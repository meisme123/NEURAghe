/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "soc_drivers.h"

void print(char *str);



int main()
{
    init_platform();
    print("************ Start Test ***************\n");
    //disable_caches();


 //  while(1);



    print_clk();
   // set_fclk_div(20, 1);
    //print_clk();
	//

   // stop_fclk();

//start_fclk();
    load_test();


	volatile int * l2 = (volatile int*)(L2_BASE_ADDRESS);

	volatile int * test= &l2[65535]; // (volatile int*)(L2_BASE_ADDRESS+ 0x3FFFC);
	volatile int * num_of_times= &l2[65532]; // (volatile int*)(L2_BASE_ADDRESS+ 0x3FFFC);
	// Select test
			// 1 -> RX L2 (num_of_times=100000 for 7 sec )
			// 2 -> RX DDR
			// 3 -> TX L2
			// 4 -> TX DDR
			// 5 -> CONV
			// 6 -> TIMER (num_of_times -> pulp cycles)
	        // 7 -> CONV + TX DDR
    *test = 4;
    *num_of_times = 1000000;

    // 5 sec a 50mhz 500000000/2;


   // *((volatile int*)0x11000004)=0xBBBBBBBB;

   // *((volatile int*)0x11000020)=0x12345678;
   // Xil_L1DCacheFlush();
   // Xil_L2CacheFlush();


    fetch_enable ();

   // while(1);

    //wait_for(10000000);

    wait_eoc ();
/*
    print("Reading from L2: \n");
    read_mem ((int*)(L2_BASE_ADDRESS + 0x5000), 40, 1);

    print("Reading from TCDM: \n");
    read_mem ((int*)(TCDM_BANK(0)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(1)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(2)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(3)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(4)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(5)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(6)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(7)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(8)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(9)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(10)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(11)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(12)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(13)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(14)), 10, INTRA_BANK_STRIDE);
    print("\n");
    read_mem ((int*)(TCDM_BANK(15)), 10, INTRA_BANK_STRIDE);
*/
    int aa;
    for (aa=0;aa<1;aa++)
    	read_tcdm ();

    read_mem ((int*)(L2_BASE_ADDRESS+ 0x3FFE0), 32, 1);

  //  print("\n");
  //  read_mem ((int*)(TCDM_BANK(5)+0x620), 25, INTRA_BANK_STRIDE);

    //disable_caches();

    //Xil_L2CacheDisable();
   // Xil_L1DCacheInvalidate();
   // Xil_L2CacheInvalidate();
    /*
    print("HWCE Debug info:\n");
    read_mem ((int*)(L2_BASE_ADDRESS+ 0x6000), 9, 1);

    print("DDR test info:\n");
    read_mem ((int*)(0x11000000), 20, 1);
*/
    print("***************  End of test ******************\n");
    //cleanup_platform();

    //while(1);


    return 0;
}
